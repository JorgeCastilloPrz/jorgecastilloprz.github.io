<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator>
  <link href="https://jorgecastilloprz.github.io/tag/kotlin/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://jorgecastilloprz.github.io/" rel="alternate" type="text/html" />
  <updated>2025-07-05T09:28:11+00:00</updated>
  <id>https://jorgecastilloprz.github.io/tag/kotlin/feed.xml</id>

  
  
  

  
    <title type="html">üë®‚Äçüíª Jorge Castillo | </title>
  

  
    <subtitle>You'll find all my tech posts here.</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Sealed interfaces in Kotlin</title>
      <link href="https://jorgecastilloprz.github.io/sealed-interfaces-kotlin" rel="alternate" type="text/html" title="Sealed interfaces in Kotlin" />
      <published>2021-03-06T10:00:00+00:00</published>
      <updated>2021-03-06T10:00:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/sealed-interfaces-kotlin</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/sealed-interfaces-kotlin">&lt;p&gt;Short overview of the sealed interfaces coming up in Kotlin 1.5.&lt;/p&gt;

&lt;h3 id=&quot;-disclaimer&quot;&gt;üö® Disclaimer&lt;/h3&gt;

&lt;p&gt;Sealed interfaces are &lt;strong&gt;Experimental&lt;/strong&gt;. They may be dropped or changed at any time. You can give feedback on them &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-42433?_ga=2.63257064.633709735.1615016427-1586827560.1591541237&quot;&gt;in YouTrack&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;-subclass-location&quot;&gt;üîé Subclass location&lt;/h3&gt;

&lt;p&gt;Limitations on where to write the subclasses of a sealed class are a matter of compiler awareness. It needs to know about all the subclasses available in order to ensure exhaustiveness.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Until not long ago, the compiler was not capable of looking further than the scope of the sealed class itself, so it was forbidden to declare subclasses outside of it. Kotlin 1.1 made it possible to declare those within the same file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Starting on Kotlin 1.5 location restrictions will get relaxed, so we can declare them on different files &lt;strong&gt;under the same module&lt;/strong&gt;. This restricts it to only implementations that ‚Äúyou own‚Äù. The Kotlin compiler can still ensure exhaustiveness given that the module is compiled together. This is also possible for &lt;a href=&quot;https://openjdk.java.net/jeps/360&quot;&gt;sealed classes and sealed interfaces in Java 15&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The aim is also to allow splitting large sealed class hierarchies into different files to make things more readable.&lt;/p&gt;

&lt;p&gt;This ability to split declarations will also go for sealed interfaces.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Vehicle.kt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Cars.kt&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FuelCar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElectricCar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Trains.kt&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HighSpeedRail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MonoRail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tram&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterCity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Plane.kt&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Airliner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ultralight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that this change is also experimental. You can give feedback &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-42433?_ga=2.134533430.633709735.1615016427-1586827560.1591541237&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;-why-not-sealed-class&quot;&gt;ü§î Why not sealed class?&lt;/h3&gt;

&lt;p&gt;When we limit the implementations per module, our library can have public sealed interfaces as part of its API surface, therefore hiding the internal implementations of it and ensuring they‚Äôll not get extra implementations provided by the client. That is very welcome for library makers ‚úÖ&lt;/p&gt;

&lt;p&gt;That way both library devs and clients can leverage exhaustive evaluation over a contract represented by an interface without leaking any internal implementations.&lt;/p&gt;

&lt;p&gt;But truth is you could achieve the same with a sealed class, given they share the same limitation. So why to seal interfaces?&lt;/p&gt;

&lt;p&gt;If we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interfaces&lt;/code&gt; across the board and there comes the need to limit the possible implementations of it, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed class&lt;/code&gt; is not a valid replacement for all the cases.&lt;/p&gt;

&lt;p&gt;One example of this would be enum classes that implement interfaces. &lt;a href=&quot;https://kotlinlang.org/docs/enum-classes.html#implementing-interfaces-in-enum-classes&quot;&gt;In Kotlin that is possible&lt;/a&gt;. Given enums can‚Äôt subclass other classes, a sealed class would not work.&lt;/p&gt;

&lt;p&gt;It‚Äôs also important to note that interfaces can implement multiple other interfaces, and sealed classes are limited to a single parent class, so there would be cases we cannot cover.&lt;/p&gt;

&lt;p&gt;One interesting door we are opening with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed interface&lt;/code&gt; is the fact that we can make a subclass be part of multiple sealed hierarchies.&lt;/p&gt;

&lt;p&gt;Think of the following set of domain errors modeled with standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed classes&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to reuse across hierarchies&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidPasswordFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let‚Äôs imagine a couple of network requests to perform a login and to load the user details. Each request can produce some errors specific to its domain, but it could also yield one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommonErrors&lt;/code&gt; that are generic. With sealed classes, reusing those hierarchies becomes a bit dirty, since it requires adding an extra wrapper case to each hierarchy where we want to reuse it, as you can see above.&lt;/p&gt;

&lt;p&gt;That creates a smell while processing it, since we are required to use nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt; statements:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loginError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loginError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidUsername&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidPasswordFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CommonError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loginError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is far from ideal given we need to perform both checks for the outer and inner sealed classes separately.&lt;/p&gt;

&lt;p&gt;One thing we could try is extending one sealed class with another. In Kotlin extending a sealed class with another means extending the cases of the parent with the additional ones provided by the child. Something like this:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We add the common errors to the LoginError hierarchy.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidPasswordFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This has the effect we want. It effectively makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginError&lt;/code&gt; exhaustive about all the cases including the ones provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommonError&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleLoginError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidUsername&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidPasswordFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleCommonError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommonErrors&lt;/code&gt; stays as is.&lt;/p&gt;

&lt;p&gt;The issue with this approach is that given we want to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommonErrors&lt;/code&gt; cases part of the other two hirarchies, we‚Äôd need to extend two superclasses which is not possible in Kotlin: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed class CommonErrors : LoginErrors(), GetUserErrors()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we are not lucky. We are back with the wrapping approach as the potential best solution. Ideally we would want to flatten it by making the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommonErrors&lt;/code&gt; simply be part of both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetUserErrors&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginErrors&lt;/code&gt; hierarchies somehow.&lt;/p&gt;

&lt;p&gt;Good news is &lt;strong&gt;sealed interfaces will unlock this&lt;/strong&gt; üëá&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// extend both hierarchies üëç&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidPasswordFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleLoginError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidPasswordFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidUsername&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleGetUserError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InvalidUserId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserNotFound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleCommonError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And &lt;strong&gt;we‚Äôve effectively flattened the error hierarchy for all the cases&lt;/strong&gt; üéâ&lt;/p&gt;

&lt;h3 id=&quot;alternative&quot;&gt;Alternative&lt;/h3&gt;

&lt;p&gt;Given a class or object can implement as many interfaces as we want, it is also possible to go the other way around and implement multiple sealed interfaces per case, which allows to decide per case about the hierarchies it belongs to.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidPasswordFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleGetUserError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserNotFound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUserId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleLoginError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidUsername&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;InvalidPasswordFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleCommonError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;ServerError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Forbidden&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Unauthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach can become dirty in cases where we have an error that needs to be part of lots of hierarchies, but it is coherent with how sealed classes work. It might be handy when different cases within the same sealed class need to be part of different hierarchies out of it.&lt;/p&gt;

&lt;p&gt;For deeper reasoning about why to introduce the concept of sealed interfaces in the language you can read &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/sealed-interface-freedom.md&quot;&gt;the original proposal&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-to-try-it-&quot;&gt;How to try it üëá&lt;/h3&gt;

&lt;p&gt;You can pick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.5&lt;/code&gt; as the language version in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinOptions&lt;/code&gt; block. Keep in mind these features are experimental üôè&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KotlinCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// In Groovy: compileKotlin {&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kotlinOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;languageVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.5&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apiVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.5&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;You might be interested in other Kotlin posts I wrote:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/tracking-side-effects-with-suspend&quot;&gt;Tracking side effects with suspend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/digging-into-kotlin-continuations&quot;&gt;Kotlin Continuations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/kotlin-sam-conversions&quot;&gt;Kotlin SAM in 1.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post with the proposal for introducing sealed classes and sealed interfaces in Java 15 was also interesting to me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openjdk.java.net/jeps/360&quot;&gt;Java 15 Proposal for sealed classes and interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course the KEEP for sealed interfaces.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/sealed-interface-freedom.md&quot;&gt;Sealed interfaces KEEP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also share thoughts and ideas &lt;a href=&quot;https://twitter.com/JorgeCastilloPR&quot;&gt;on Twitter&lt;/a&gt; quite regularly. You can also find me &lt;a href=&quot;https://www.instagram.com/jorgecastillopr/&quot;&gt;on Instagram&lt;/a&gt;. See you there!&lt;/p&gt;

&lt;p&gt;More interesting stuff to come üôå&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">Short overview of the sealed interfaces coming up in Kotlin 1.5.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Tracking side effects at compile time with suspend</title>
      <link href="https://jorgecastilloprz.github.io/tracking-side-effects-with-suspend" rel="alternate" type="text/html" title="Tracking side effects at compile time with suspend" />
      <published>2020-10-10T10:00:00+00:00</published>
      <updated>2020-10-10T10:00:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/tracking-side-effects-with-suspend</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/tracking-side-effects-with-suspend">&lt;p&gt;Thinking of suspend as a Kotlin stdlib mechanism for flagging and tracking effects at compile time.&lt;/p&gt;

&lt;h3 id=&quot;going-declarative&quot;&gt;Going declarative&lt;/h3&gt;

&lt;p&gt;Functional Programming puts a lot of emphasis on achieving &lt;strong&gt;concern separation&lt;/strong&gt; between the pure logics of a program (&lt;strong&gt;algebras&lt;/strong&gt;) and the &lt;strong&gt;runtime&lt;/strong&gt; used to run it.&lt;/p&gt;

&lt;p&gt;To guarantee this separation, we need mechanisms that allow us to &lt;strong&gt;represent our program in memory&lt;/strong&gt;, so we can later &lt;strong&gt;interpret that program with a runtime&lt;/strong&gt;. This clear decoupling between the actual program description and the runtime, allows to swap runtime execution strategies, and even apply desired runtime optimizations.&lt;/p&gt;

&lt;p&gt;One example of this is the &lt;a href=&quot;https://kotlinlang.org/docs/reference/sequences.html&quot;&gt;Kotlin stdlib‚Äôs Sequences&lt;/a&gt;. Those provide operators to work over the elements lazily while staying declarative. In other words, deferred.&lt;/p&gt;

&lt;p&gt;Then we have a few &lt;strong&gt;terminal operators&lt;/strong&gt;, which only exist for ultimately consuming / executing the in memory program created and ultimately apply optimizations.&lt;/p&gt;

&lt;p&gt;From the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúActual computing happens only when the result of the whole processing chain is requested.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The quick brown fox jumps over the lazy dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;wordsSequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// convert list to a sequence&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lengthsSequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordsSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter: $it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;length: ${it.length}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Lengths of first 4 words longer than 3 chars&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// terminal operation: obtaining the result as a List&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lengthsSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try copying this code, commenting the final line and running it. You‚Äôll see how the sequence is never processed. Before calling terminal operators, what we have is only a &lt;strong&gt;description of a program&lt;/strong&gt; waiting to be executed.&lt;/p&gt;

&lt;p&gt;Another example of this can be found &lt;a href=&quot;https://developer.android.com/jetpack/compose/mental-model&quot;&gt;in Jetpack Compose&lt;/a&gt;, in case you do Android.&lt;/p&gt;

&lt;p&gt;Compose allows us to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Composable&lt;/code&gt; functions as the atomic pieces to create an in memory description of our UI. Each function describes a &lt;strong&gt;UI effect&lt;/strong&gt;. Then, there is a runtime prepared to interpret that &lt;strong&gt;description tree&lt;/strong&gt; and apply desired optimizations.&lt;/p&gt;

&lt;p&gt;Some examples of runtime optimizations in Compose could be running compositions in parallel, offloading compositions to different threads, running those in different order, or features like &lt;a href=&quot;https://developer.android.com/jetpack/compose/mental-model#recomposition&quot;&gt;smart recomposition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Composable&lt;/code&gt; functions have restricted usage. The compose compiler will enforce us to call them from another composable function or an &lt;strong&gt;environment&lt;/strong&gt; prepared to run UI effects üëâ &lt;u&gt;An integration point like `setContent {}`&lt;/u&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is particularly important, since this restriction ensures we cannot call composable functions from anywhere, but always from an environment that is able to interpret them and apply the required optimizations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But, can we also use these ideas for composing our program pure logics (algebras)? Of course we can, by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suspend is the Kotlin stdlib mechanism to make effects visible for the compiler, so we enforce them to run under an environment that is prepared to run effects. A.K.A: Coroutine, or in other words, a prepared &lt;strong&gt;runtime&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/relizarov/status/1314116971286466560&quot;&gt;This Tweet&lt;/a&gt; by Roman Elizarov, team lead at JetBrains describes this idea pretty well.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The suspend keyword in Kotlin colors parts of the code, marking it as asynchronous, enforcing constraints on how it can be used. This is a good thing. We should not do network I/O calls from anywhere in our code, but only from specially designated places in our architecture.&lt;/p&gt;&amp;mdash; Roman Elizarov (@relizarov) &lt;a href=&quot;https://twitter.com/relizarov/status/1314116971286466560?ref_src=twsrc%5Etfw&quot;&gt;October 8, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;We shouldn‚Äôt make potentially harmful calls from anywhere, but from an environment that is prepared for it.&lt;/p&gt;

&lt;h3 id=&quot;making-effects-pure&quot;&gt;Making effects pure&lt;/h3&gt;

&lt;p&gt;We learned the benefits of concern separation, and that we can achieve it using the power of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suspend is the Kotlin stdlib mechanism for flagging effects üëâ ensure they‚Äôre called from the correct places.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make an effect pure, just flag it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt;.  By doing this we‚Äôll be making Kotlin compiler aware of it, so we‚Äôll not be able to call the effect from anywhere. This will shorten the feedback loop by &lt;strong&gt;moving side effect tracking to compile time&lt;/strong&gt;. If we try to call an effect from a not allowed place, we‚Äôll get an instant red underline.&lt;/p&gt;

&lt;p&gt;Let‚Äôs go ahead and flag all effects as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; in our architecture. Those will likely be closer to the architecture edges, like those places where we load data from network, caches, persistence, access file system, display something on screen, etc.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Retrofit service&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserPersistence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnalyticsTracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trackEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This action will enforce us to also flag the callers as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt;, and this requirement will crawl up our call stack to effectively enforce us to convert our complete program in a description of a program, meaning going declarative. ‚úÖ&lt;/p&gt;

&lt;p&gt;At some point we will reach the integration point, where we‚Äôll require to provide a runtime to run our suspended program üëâ&lt;u&gt;a Coroutine&lt;/u&gt;. This will ideally happen as early as possible in our architecture, or in other words, be &lt;strong&gt;as close as possible to our program‚Äôs entry point&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is because we are looking for writing our complete program in this declarative style, hence making it completely &lt;strong&gt;pure&lt;/strong&gt;. Our program logics as the algebras that describe our program.&lt;/p&gt;

&lt;p&gt;Then we‚Äôll leave the runtime as a very thin layer that works as an integration point intentionally constrained to the entry point.&lt;/p&gt;

&lt;h3 id=&quot;the-runtime&quot;&gt;The runtime&lt;/h3&gt;

&lt;p&gt;We already know how to achieve concern separation by suspending effects, and our ultimate goal of achieving purity for the complete program. That will also make it more testable, since &lt;strong&gt;purity means determinism, and therefore predictability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To provide a decoupled runtime, and for the case of programs with suspended effects (also known as effectful programs), we will need to create a coroutine.&lt;/p&gt;

&lt;p&gt;In case we are working with object oriented / imperative style, we are probably using KotlinX Coroutines. We can use the coroutine builders to create one, like &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&quot;&gt;launch&lt;/a&gt; and &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&quot;&gt;async&lt;/a&gt;, which will require a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoroutineScope&lt;/code&gt; for the structure concurrency:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;coroutineScope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// Our suspended program üçÉ&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just an intentionally simple example, but we‚Äôll need to be conscious about the convenient scope to use per use case, or how to create it. The key point here is that we‚Äôve created an environment for running a suspended program.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say we‚Äôre not using KotlinX Coroutines, but only the stdlib coroutines support (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoroutineContext&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/start-coroutine.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startCoroutine&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/suspend-coroutine.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspendCoroutine&lt;/code&gt;&lt;/a&gt;‚Ä¶ etc), we can also have our environment (Coroutine) created like:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Our suspended program üçÉ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startCoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptyCoroutineContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;resumeWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Kotlin Result */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we can create a coroutine over our suspended program with the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/start-coroutine.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startCoroutine&lt;/code&gt; stdlib call&lt;/a&gt;. It‚Äôs a bit more convoluted, since we‚Äôll have to provide implementations for the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoroutineContext&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-continuation.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Truth is we‚Äôll probably work like this if writing a library built on top of the Kotlin stdlib suspend support. In that case we‚Äôd probably not want to pack KotlinX Coroutines into our library, since it‚Äôs a quite high level library, but work over the stdlib suspend machinery instead to stay efficient. After all, that is also how KotlinX Coroutines was built.&lt;/p&gt;

&lt;p&gt;Moving into the Functional Programming world, we‚Äôve got the Arrow Fx Coroutines library instead, which provides the &lt;a href=&quot;https://github.com/arrow-kt/arrow-fx/blob/b342185cef8e33fc126715b4b58f7ee3ab7d8bd9/arrow-fx-coroutines/src/main/kotlin/arrow/fx/coroutines/Enviroment.kt#L21&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cancellable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unsafeRunAsyncCancellable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Our suspended program üçÉ },&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* handle errors unhandled by the suspended program */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* handle result of the program */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; also provides a runtime and takes care of the execution strategy used, providing methods to run our program &lt;a href=&quot;https://github.com/arrow-kt/arrow-fx/blob/b342185cef8e33fc126715b4b58f7ee3ab7d8bd9/arrow-fx-coroutines/src/main/kotlin/arrow/fx/coroutines/Enviroment.kt#L40&quot;&gt;synchronously&lt;/a&gt;, &lt;a href=&quot;https://github.com/arrow-kt/arrow-fx/blob/b342185cef8e33fc126715b4b58f7ee3ab7d8bd9/arrow-fx-coroutines/src/main/kotlin/arrow/fx/coroutines/Enviroment.kt#L58&quot;&gt;asynchronously&lt;/a&gt;, or &lt;a href=&quot;https://github.com/arrow-kt/arrow-fx/blob/b342185cef8e33fc126715b4b58f7ee3ab7d8bd9/arrow-fx-coroutines/src/main/kotlin/arrow/fx/coroutines/Enviroment.kt#L67&quot;&gt;asynchronously and cancellable&lt;/a&gt;, so we can retain a cancellation token to invoke later on and &lt;strong&gt;cancel the whole execution tree&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can also pass an explicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoroutineContext&lt;/code&gt; for executing the program, which by default is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputationPool&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; is actually an interface, so we can provide &lt;strong&gt;our own runtimes&lt;/strong&gt; in case we want to, and in case &lt;a href=&quot;https://github.com/arrow-kt/arrow-fx/blob/b342185cef8e33fc126715b4b58f7ee3ab7d8bd9/arrow-fx-coroutines/src/main/kotlin/arrow/fx/coroutines/Enviroment.kt#L86&quot;&gt;the default one&lt;/a&gt; provided by Arrow doesn‚Äôt fit our needs.&lt;/p&gt;

&lt;p&gt;In case we want to go for the functional approach, we‚Äôll get access to all the functional effect apis, functional data types, concurrency operators, functional Streams, out of the box cancellation, and all the functional goodies the library provides. All of them are meant to work seamlessly in combination with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One example of this can be the advanced concurrency operators from Arrow Fx Coroutines. Those are meant to run effects, so they‚Äôre also tagged as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt;, meaning we can‚Äôt really run those outside of a controlled environment. You can have a sneak peek on those &lt;a href=&quot;https://www.47deg.com/presentations/2020/10/08/functional-android-apps/&quot;&gt;on the slides for my Android Summit talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For runtime optimizations, the Arrow team is preparing more advanced work at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; level that will enable quite interesting behaviors that the Kotlin stdlib doesn‚Äôt support at this point. That will be unveiled in the future, but will leverage the capabilities of concern separation even more. Stay tunned for updates üôå&lt;/p&gt;

&lt;h3 id=&quot;suspended-entry-points&quot;&gt;Suspended entry points&lt;/h3&gt;

&lt;p&gt;Some platforms / frameworks provide suspended entry points, like the well known Kotlin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend main&lt;/code&gt; function, or the Ktor support for writing suspended endpoints.&lt;/p&gt;

&lt;p&gt;If a framework provides this, that means the platform is providing us a preconfigured environment to run suspended programs. Therefore, we‚Äôll likely not need to provide one, unless we really want / need to replace it.&lt;/p&gt;

&lt;p&gt;Most of the time the platform will have appropiately configured / optimized the environment for the average platform use case. That is picking the proper coroutine context, for example. But in case we want to leverage the upcoming capabilities of Arrow in terms of runtime optimization, we‚Äôll need to replace it with the Arrow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We‚Äôll likely write more in depth literature about all that when the time comes.&lt;/p&gt;

&lt;h3 id=&quot;what-about-writing-our-pure-program&quot;&gt;What about writing our pure program?&lt;/h3&gt;

&lt;p&gt;Once we‚Äôve got a runtime to interpret our in memory program, and a means to flag side effects to keep those under control by the compiler, we‚Äôll start writing our pure declarative program logics.&lt;/p&gt;

&lt;p&gt;In the case of Arrow, we might want to use data types like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validated&lt;/code&gt; and stay under the suspend umbrella, so we always need a proper environment to run the suspended effectful program. We‚Äôll also be able to leverage the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt; computational blocks and the bindings for composing the program logics through a neat direct syntax.&lt;/p&gt;

&lt;p&gt;I‚Äôm planning to write a detailed post on how to write pure logics for our decoupled architectures that will showcase all that plus a lot of concurrency operators, so I‚Äôll not dive deep into that just yet. For now you can have a look to the mentioned &lt;a href=&quot;https://www.47deg.com/presentations/2020/10/08/functional-android-apps/&quot;&gt;Android Summit talk&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;-final-thoughts&quot;&gt;üìù Final thoughts&lt;/h3&gt;

&lt;p&gt;Any programs can be written in an &lt;strong&gt;eager&lt;/strong&gt; or a declarative deferred way. If we go for eager apis our computations will run as we created them, removing any chance of representing the program in memory and interpreting it in different ways later on.&lt;/p&gt;

&lt;p&gt;For going declarative we could use data types encoded to be intentionally deferred / lazy, or just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I want to thank &lt;a href=&quot;https://www.47deg.com/&quot;&gt;47 Degrees&lt;/a&gt; for giving me the chance to learn and communicate all this in diverse forms.&lt;/p&gt;

&lt;p&gt;You might be interested in other posts I wrote about Kotlin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.47deg.com/presentations/2020/10/08/functional-android-apps/&quot;&gt;Android Summit talk covering all described in this post in depth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/digging-into-kotlin-continuations&quot;&gt;Kotlin Continuations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/kotlin-sam-conversions&quot;&gt;Kotlin SAM support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/tag/kotlin/&quot;&gt;All Kotlin posts including the FP ones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also share thoughts and ideas &lt;a href=&quot;https://twitter.com/JorgeCastilloPR&quot;&gt;on Twitter&lt;/a&gt; quite regularly. You can also find me &lt;a href=&quot;https://www.instagram.com/jorgecastillopr/&quot;&gt;on Instagram&lt;/a&gt;. See you there!&lt;/p&gt;

&lt;p&gt;More interesting stuff to come üôå&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      
        <category term="android" />
      

      
        <summary type="html">Thinking of suspend as a Kotlin stdlib mechanism for flagging and tracking effects at compile time.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Kotlin Continuations</title>
      <link href="https://jorgecastilloprz.github.io/digging-into-kotlin-continuations" rel="alternate" type="text/html" title="Kotlin Continuations" />
      <published>2020-09-03T11:00:00+00:00</published>
      <updated>2020-09-03T11:00:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/digging-into-kotlin-continuations</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/digging-into-kotlin-continuations">&lt;p&gt;Continuations represent the rest of a program. They are a form of control flow.&lt;/p&gt;

&lt;h3 id=&quot;-compile-time&quot;&gt;ü§ñ Compile time&lt;/h3&gt;

&lt;p&gt;Each time Kotlin finds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; function, that represents a &lt;strong&gt;suspension point&lt;/strong&gt; that the compiler will desugarize into a callback style. For example:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Done!&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we remove the boilerplate and metadata to stay simple, that gets decompiled to something like this in Java (using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tools&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Show Kotlin Bytecode&lt;/code&gt; IntellIJ menu option):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// FileKt.java&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileKt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Done!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var10000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var10000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntrinsicsKt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCOROUTINE_SUSPENDED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var10000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obviating the need for an enclosing class given the lack of ‚Äúpackage level‚Äù functions in Java, the key point here is how both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; functions have been converted into &lt;strong&gt;static functions&lt;/strong&gt; that get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; passed as an explicit argument. This is formally called CPS (&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;Continuation Passing Style&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;You can see how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function needs to forward the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$completion&lt;/code&gt; continuation to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doSomething()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;All that is hidden to us by the Kotlin compiler, that allows to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; functions synchronously, while everything stays asynchronous under the hood. That‚Äôs the magic and the point of all this.&lt;/p&gt;

&lt;h3 id=&quot;-continuation&quot;&gt;‚è© Continuation&lt;/h3&gt;

&lt;p&gt;So, as explained above, every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; is &lt;strong&gt;associated with a suspension point&lt;/strong&gt;. A continuation is the implicit parameter that the Kotlin compiler passes to any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; function when compiling it. It is represented by a basic contract:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoroutineContext&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resumeWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under the hood, Kotlin will generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContinuationImpl&lt;/code&gt; for this contract for each suspended function, which we will dive into in further sections on this post.&lt;/p&gt;

&lt;p&gt;As you can see, it looks like a callback, because that is essentially what it is. You can also find it &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-continuation/&quot;&gt;in the official docs&lt;/a&gt;. It‚Äôs composed of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoroutineContext&lt;/code&gt; that tells the coroutine &lt;strong&gt;how to suspend&lt;/strong&gt; itself.&lt;/li&gt;
  &lt;li&gt;A callback to wire results in the end. It uses the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/&quot;&gt;Kotlin Result datatype&lt;/a&gt; for that purpose, so you can resume your program either with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;success&lt;/code&gt; or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failure&lt;/code&gt; (exception) as a result. Following docs:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúIt will resume the execution of the corresponding coroutine by passing the given value as the return value of the last suspension point.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the continuation decides how the program continues after some work, and that makes it &lt;strong&gt;another form of control flow&lt;/strong&gt;. It will be used to coordinate the work between all our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;There are also a couple of extension functions as shortcuts, in case you need to deal with continuations manually at some point:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/resume.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fun &amp;lt;T&amp;gt; Continuation&amp;lt;T&amp;gt;.resume(value: T)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/resume-with-exception.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fun &amp;lt;T&amp;gt; Continuation&amp;lt;T&amp;gt;.resumeWithException(exception: Throwable)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a constructor function &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-continuation.html&quot;&gt;in the standard library&lt;/a&gt; to create a Continuation given a context and a callback function:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoroutineContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;crossinline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resumeWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is handy to have, but overall in Kotlin &lt;strong&gt;you‚Äôll likely not need to write your own Continuations&lt;/strong&gt;, unless you are building your own libraries like we do with &lt;a href=&quot;https://arrow-kt.io/&quot;&gt;Arrow&lt;/a&gt;, and only for some very specific use cases. There‚Äôs a little bit more on this topic below.&lt;/p&gt;

&lt;p&gt;You will likely rely on the Kotlin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; support instead, and let the Kotlin compiler desugar it under the hood for you.&lt;/p&gt;

&lt;h3 id=&quot;Ô∏è-how-does-it-work-internally&quot;&gt;‚öôÔ∏è How does it work internally?&lt;/h3&gt;

&lt;p&gt;Recapping about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; functions:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; function is a function that can be suspended (paused) and resumed later on. They can execute long running operations in a non blocking way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keeping that in mind, Kotlin can suspend some work at arbitrary points within a Coroutine or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; function, as soon as it finds any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; function calls. Those would be the afforementioned &lt;strong&gt;suspension points&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;program&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstOp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secondOp&lt;/code&gt; in this example:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;firstOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;secondOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;firstRes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;firstOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;secondOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the Android docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kotlin uses a stack frame to manage which function is running along with any local variables. When suspending a coroutine, the current stack frame is copied and saved for later. When resuming, the stack frame is copied back from where it was saved, and the function starts running again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is how the flow and the state of the program can be stored and lately resumed for each suspension point.&lt;/p&gt;

&lt;p&gt;For coordinating the different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; functions, Kotlin generates a &lt;strong&gt;finite state machine&lt;/strong&gt;. It creates a label for each suspension point, so it has a way to jump from one to another. Then it‚Äôs able to call our suspend function recursively with different label values to jump between the different states as required.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; will keep track of the current label at any point in time, and will be updated accordingly.&lt;/p&gt;

&lt;p&gt;For each suspension point reached, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; is passed, and lately updated with the corresponding result of the computation (so the next one can have access to it) and the corresponding next label value for the following recursion.&lt;/p&gt;

&lt;p&gt;All this is handled into a conveniently generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContinuationImpl&lt;/code&gt; instance that implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; contract and is passed around the different states.&lt;/p&gt;

&lt;p&gt;I‚Äôm intentionally staying a bit high level here, because there is &lt;a href=&quot;https://proandroiddev.com/how-do-coroutines-work-under-the-hood-803e6e9da8bb&quot;&gt;this awesome post&lt;/a&gt; by Ashish Kumar for in depth details üëå&lt;/p&gt;

&lt;p&gt;About storing and restoring state before and after suspension points, there are also some interesting gotchas on &lt;a href=&quot;https://medium.com/@lucianoalmeida1/an-overview-on-kotlin-coroutines-d55e123e137b&quot;&gt;this post&lt;/a&gt; by Luciano Almeida üôè&lt;/p&gt;

&lt;h3 id=&quot;Ô∏èÔ∏è-java-interoperability&quot;&gt;üïµÔ∏è‚Äç‚ôÄÔ∏è Java interoperability&lt;/h3&gt;

&lt;p&gt;As you probably imagine already, the &lt;strong&gt;Kotlin compiler plays a big role&lt;/strong&gt; for making the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; magic work. That means you will get the most out of this feature if you call suspended functions from Kotlin, not meaning they are not supported at all from Java.&lt;/p&gt;

&lt;p&gt;Since our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; functions are translated into &lt;strong&gt;static&lt;/strong&gt; functions within a class, we should be able to call them from java using a non sugarized standard callback style, by passing an explicit instance of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;FileKt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resumeWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// process result `o`&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoroutineContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptyCoroutineContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One issue here is that starting on Kotlin 1.3, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; uses the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/&quot;&gt;Kotlin Result&lt;/a&gt; inline class for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resumeWith&lt;/code&gt; method, and &lt;strong&gt;inline classes are not supported by Java&lt;/strong&gt;. If you want to use them you must provide explicit wrappers from Kotlin. More details on &lt;a href=&quot;https://discuss.kotlinlang.org/t/inline-classes-tedious-to-use-considering-java-interop/9382&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, if you try to compile the above Java snippet with the anonymous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; implementation, it will not compile because of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Result&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;One thing you could do to overcome this issue would be to provide your own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; implementation that maps the Kotlin result to something else, to get rid of it and open the usage from Java. We actually &lt;a href=&quot;https://github.com/arrow-kt/arrow-core/blob/master/arrow-core-data/src/main/kotlin/arrow/typeclasses/internal/Continuation.kt&quot;&gt;do that in the Arrow library&lt;/a&gt;, but with a different ultimate purpose.&lt;/p&gt;

&lt;p&gt;But if you really want to call your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; functions from Java because you might be facing a gradual migration, there are simpler ways.&lt;/p&gt;

&lt;p&gt;One approach would be to translate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; call to a JDK 8 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt;, so the bridging allows you to keep the asynchronous use case covered:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomethingFromJava&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;GlobalScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;future&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or with explicit CoroutineContext&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomethingFromJava&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;GlobalScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That will require the jdk8 coroutines integration module though:&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you‚Äôll be able to call it from Java:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;CompletableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileKt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doSomethingFromJava&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is possible because the bridging is done on the Kotlin side, hence the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Result&lt;/code&gt; type is not visible from Java anymore.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that here we‚Äôre using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GlobalScope&lt;/code&gt; for the sake of the example, but you should likely use a narrower &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoroutineScope&lt;/code&gt; that fits your requirements in case you are using KotlinX Coroutines library. Since that logic is on the Kotlin side, you‚Äôre free to apply any design you want in that sense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another alternative would be to &lt;strong&gt;use the KotlinX Coroutines builders from Java&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuildersKt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;GlobalScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;CoroutineStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CoroutineStart.LAZY, or other strategies&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Function2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do your stuff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Some result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuildersKt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;GlobalScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;CoroutineStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CoroutineStart.LAZY, or other strategies&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Function2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do your stuff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Usually used to bridge regular blocking code to libraries using suspend, &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// to be used in main functions like from tests or similar.&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuildersKt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;runBlocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Function2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// do your stuff&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Some result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If this blocked thread is interrupted, then the coroutine job is cancelled and&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// * this runBlocking invocation throws InterruptedException.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// *&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do something with the interruption error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are the standard KotlinX coroutines launchers, but called from Java, so it obviously doesn‚Äôt look that idiomatic. Just another interesting option to share.&lt;/p&gt;

&lt;p&gt;Finally, you can make it even easier, and &lt;strong&gt;simply provide Kotlin functions that launch the required coroutines and call those from Java&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;-explicit-usages-of-the-continuation-in-kotlin&quot;&gt;üòØ Explicit usages of the Continuation in Kotlin&lt;/h3&gt;

&lt;p&gt;As we said you‚Äôll likely not use continuations explicitly in Kotlin, except when you do. There are some use cases where you want control over when the continuation is used to resume the state of your program on a given suspension point. We can see this when we are wrapping callback style apis with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspendCoroutine&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;syncClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspendCoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;emptyStateIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnClickListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resumeWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cont&lt;/code&gt; parameter that‚Äôs our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continuation&lt;/code&gt; that we can use to resume our program with the required result. These wrappers are often used in Android to wrap system listeners to capture user interaction, for example.&lt;/p&gt;

&lt;p&gt;But this is dangerous usage actually, because coroutines are &lt;strong&gt;not multishot&lt;/strong&gt;. Meaning second time you click on the button, it‚Äôll try to resume an already resumed coroutine using the same continuation, and therefore crash üí•. So you should always &lt;strong&gt;detach your listener&lt;/strong&gt; after the first time:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lifecycleScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launchWhenStarted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;syncClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;Clicked&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;syncClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;suspendCoroutine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;emptyStateIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnClickListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resumeWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Clicked&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;emptyStateIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// detach!&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will ensure you get your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;/code&gt; as ‚ÄúClicked‚Äù only once.&lt;/p&gt;

&lt;p&gt;As mentioned, this is probably not the best example in the world, since an event like button clicks would be better represented as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; of events you can observe, not a single one, but it‚Äôs a starting point to understand how this works.&lt;/p&gt;

&lt;p&gt;You‚Äôll likely use this wrapping style to convert one time triggered async logics, like waiting for a View Layout, for example. Those one time calls that you proactively want to call and ensure they are done before stepping into something else. There‚Äôs a good example of that in &lt;a href=&quot;https://medium.com/androiddevelopers/suspending-over-views-19de9ebd7020&quot;&gt;this detailed post by Chris Banes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is also widely used to wrap things like network, database, file read requests or the like, where third party apis might impose a callback based style, so by wrapping them like this you can interoperate with them &lt;strong&gt;synchronously instead&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That said, it is &lt;strong&gt;highly recommendable&lt;/strong&gt; to use the cancellable alternative instead: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspendCancellableCoroutine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It provides a &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/index.html&quot;&gt;CancellableContinuation&lt;/a&gt; instead we can use to wire up cancellation. We could use that in Android to release a listener if the caller coroutine gets cancelled in the scope, for example.&lt;/p&gt;

&lt;p&gt;(I‚Äôll copy Chris Banes example here since it‚Äôs pretty self explanatory üôè)&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;awaitNextLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspendCancellableCoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This lambda is invoked immediately, allowing us to create&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a callback/listener&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OnLayoutChangeListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLayoutChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// The next layout has happened!&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// First remove the listener to not leak the coroutine&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeOnLayoutChangeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Finally resume the continuation, and&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// wake the coroutine up&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If the coroutine is cancelled, remove the listener&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invokeOnCancellation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeOnLayoutChangeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// And finally add the listener to view&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;addOnLayoutChangeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The coroutine will now be suspended. It will only be resumed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// when calling cont.resume() in the listener above&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you can use it like:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;viewLifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycleScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do some stuff...&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Wait for the next layout pass to know height of the view&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;awaitNextLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Do some other stuff that depends on the view measures...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, he makes sure that the listener is detached whenever the parent coroutine gets cancelled. In the other hand, if the asynchronous api you are wrapping provides cancellation capabilities, you might want to perform &lt;strong&gt;bidirectional cancellation&lt;/strong&gt; and cancel the parent coroutine in return, also. There is also an example of that &lt;a href=&quot;https://medium.com/androiddevelopers/suspending-over-views-19de9ebd7020&quot;&gt;in the mentioned blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the cancellable variant &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/suspend-cancellable-coroutine.html&quot;&gt;is provided by KotlinX Coroutines&lt;/a&gt;, not the standard library. &lt;strong&gt;Kotlin stdlib doesn‚Äôt provide cancellation support&lt;/strong&gt;, that is provided by runtime libraries built on top of it like &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt;KotlinX Coroutines&lt;/a&gt; or &lt;a href=&quot;https://github.com/arrow-kt/arrow-fx/tree/master/arrow-fx-coroutines&quot;&gt;Arrow Fx Coroutines&lt;/a&gt;. Both libraries provide support for collaborative cancellation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For cases like user interactions you‚Äôd likely prefer a Stream based solution, so for wrapping those you can use either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callbackFlow {}&lt;/code&gt; &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/callback-flow.html&quot;&gt;from KotlinX Coroutines&lt;/a&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.cancellable {}&lt;/code&gt; &lt;a href=&quot;https://github.com/arrow-kt/arrow-fx/blob/fb9c1fc18d2d956fb0fa3da3ff443513f73da6c9/arrow-fx-coroutines/src/test/kotlin/arrow/fx/coroutines/stream/CallbackTest.kt#L47&quot;&gt;from Arrow Fx Coroutines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of how it would look like using the &lt;strong&gt;Functional Streams&lt;/strong&gt; implementation by the upcoming Arrow Fx Coroutines, only as a sneak peek.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SwipeRefreshLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;refreshes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancellable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SwipeRefreshLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OnRefreshListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@refreshes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnRefreshListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;CancelToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@refreshes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnRefreshListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I‚Äôm not getting deeper into this topic on this post since it‚Äôs out of scope, but you can expect some posts about this idea in the future üëç&lt;/p&gt;

&lt;h3 id=&quot;-extra-bullets&quot;&gt;üí° Extra bullets&lt;/h3&gt;

&lt;p&gt;Continuations or Continuation Passing Style is a concept that you can find in Kotlin for encoding control flow, but it‚Äôs essentially a generic programming concept not only tied to Kotlin. You could take it further and implement ‚Äúdelimited continuations‚Äù based on a similar but a bit more advanced idea. When a continuation represents the rest of a program, a delimited continuations captures only some part of it. This is a wide topic with a lot of papers published since quite long ago that could start shining soon in Kotlin üòâ&lt;/p&gt;

&lt;p&gt;Here you have some links of interest:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/sebfisch/2235780&quot;&gt;This gist&lt;/a&gt; by &lt;a href=&quot;https://gist.github.com/sebfisch&quot;&gt;Sebastian Fischer&lt;/a&gt; is an interesting source for starting to dig into the concept of Delimited Continuations.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cs.ru.nl/~dfrumin/notes/delim.html&quot;&gt;This post&lt;/a&gt; by &lt;a href=&quot;https://cs.ru.nl/~dfrumin/&quot;&gt;Dan Frumin&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/androiddevelopers/suspending-over-views-19de9ebd7020&quot;&gt;Suspending over Views&lt;/a&gt; by Chris Banes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/androiddevelopers/suspending-over-views-example-260ce3dc9100&quot;&gt;Suspending over Views - Example&lt;/a&gt; by Chris Banes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://proandroiddev.com/how-do-coroutines-work-under-the-hood-803e6e9da8bb&quot;&gt;Suspend functions under the hood&lt;/a&gt; by Ashish Kumar.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;Continuation Passing Style&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@lucianoalmeida1/an-overview-on-kotlin-coroutines-d55e123e137b&quot;&gt;An Overview on Kotlin Coroutines&lt;/a&gt; by &lt;a href=&quot;https://medium.com/@lucianoalmeida1&quot;&gt;Luciano Almeida&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;You might be interested in other posts I wrote about Kotlin, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/kotlin-sam-conversions&quot;&gt;Kotlin SAM conversions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I share thoughts and ideas &lt;a href=&quot;https://twitter.com/JorgeCastilloPR&quot;&gt;on Twitter&lt;/a&gt; quite regularly. You can also find me &lt;a href=&quot;https://www.instagram.com/jorgecastillopr/&quot;&gt;on Instagram&lt;/a&gt;. See you there!&lt;/p&gt;

&lt;p&gt;Stay tunned for Kotlin posts üôå&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">Continuations represent the rest of a program. They are a form of control flow.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Support for Kotlin SAM in release 1.4</title>
      <link href="https://jorgecastilloprz.github.io/kotlin-sam-conversions" rel="alternate" type="text/html" title="Support for Kotlin SAM in release 1.4" />
      <published>2020-08-15T11:00:00+00:00</published>
      <updated>2020-08-15T11:00:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/kotlin-sam-conversions</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/kotlin-sam-conversions">&lt;p&gt;About Kotlin SAM support for Java interoperability and also for Kotlin interfaces starting on release 1.4.&lt;/p&gt;

&lt;h3 id=&quot;-sam&quot;&gt;ü§∑‚Äç SAM?&lt;/h3&gt;

&lt;p&gt;This feature also exists in other JVM languages like Java 8 or Scala. SAM stands for Single Abstract Method and it refers to interfaces with a single &lt;strong&gt;non-default&lt;/strong&gt; method. Those that are frequently used as &lt;strong&gt;callbacks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These interfaces are also called ‚Äúfunctional interfaces‚Äù frequently because their only purpose is to be used as a function. That is actually the name they have in Java.&lt;/p&gt;

&lt;h3 id=&quot;-java-sugar&quot;&gt;üç¨‚Äç Java sugar&lt;/h3&gt;

&lt;p&gt;Kotlin can sugarize any Java interfaces that follow that pattern into lambdas to leverage interoperability. This process is called &lt;strong&gt;SAM Conversion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The main goal for this feature is interoperability. The ultimate idea is that you can call a Java SAM as if you were calling a simple function.&lt;/p&gt;

&lt;p&gt;SAM conversions work in both directions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java SAM üëâ Kotlin lambda.&lt;/li&gt;
  &lt;li&gt;Kotlin lambda üëâ Java SAM.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are possible when the input and output types for the Java SAM and the Kotlin function match. Let‚Äôs use a simple example. Here‚Äôs a Java SAM interface.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we tried to use this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Consumer&lt;/code&gt; from Kotlin as if it was Java, we‚Äôd probably go for an anonymous object:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you do that, the Kotlin idea plugin will warn you about the chance to convert it to a lambda:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;820&quot; src=&quot;/assets/images/kotlinsam1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as you do this, the code will turn into the following:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Much better, isn‚Äôt it? There is only a little downside. When assigning to a variable we are forced to provide the interface name explicitly. You can‚Äôt avoid that, even if you provide an explicit type on the left side. Still, it‚Äôs better than writing the complete anonymous object boilerplate.&lt;/p&gt;

&lt;p&gt;That is different when you use it in an input position, like a function parameter. Here, you can still be explicit or simply omit the interface name. These two examples are equivalent:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Explicit interface name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Omit interface name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;consume&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If your Java class has multiple method overloads that take different SAM interfaces, you can always provide the explicit type for disambiguation.&lt;/p&gt;

&lt;p&gt;SAM conversions were &lt;strong&gt;only possible when interoperating with Java functions&lt;/strong&gt; before Kotlin 1.4. This was a language design decision, since this feature existed only for this purpose, given Kotlin already provides support for function types and function literals.&lt;/p&gt;

&lt;h3 id=&quot;-kotlin-sugar&quot;&gt;üç≠ Kotlin sugar&lt;/h3&gt;

&lt;p&gt;I will later explain why that decision changed, but starting on &lt;a href=&quot;https://github.com/JetBrains/kotlin/releases/tag/v1.4.0&quot;&gt;the new stable release 1.4&lt;/a&gt;, SAM interfaces are also supported for Kotlin. Now you can write your interface in Kotlin and SAM conversions will also work.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say we had this Kotlin interface:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before Kotlin 1.4 this was the only way to create an anonymous instance for it:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;heyProducer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hey&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the same was required for passing an instance to a Kotlin method:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produceNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;produceNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Starting on Kotlin 1.4, SAM conversions also work for those scenarios. First thing you‚Äôll need to do is flag your functional interfaces as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fun interface&lt;/code&gt;. Kotlin made this an opt-in and explicit choice so not all interfaces with a single abstract method work as functional interfaces by default.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Kotlin 1.4+&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now you can use it like this (also leveraging type inference):&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;heyProducer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hey&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;produceNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some interfaces widely used from the Kotlin stdlib are also flagged as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fun interface&lt;/code&gt; now. Some of those are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Comparator&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadOnlyProperty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PropertyDelegateProvider&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;-why-would-i-use-it-for-kotlin-interfaces&quot;&gt;ü§î Why would I use it for Kotlin interfaces?&lt;/h3&gt;

&lt;p&gt;Kotlin has support for function types and function literals (lambdas), so that is a reasonable doubt to have.&lt;/p&gt;

&lt;p&gt;That is precisely the same doubt the Kotlin team had for not introducing those before. They just realized now there are some scenarios where it could be convenient. &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-7770?_ga=2.103945408.1399009746.1597478338-1610252576.1591121905&amp;amp;_gac=1.256115449.1597482077.CjwKCAjwj975BRBUEiwA4whRByZeeWUfKevdonRWUAmo11kB3Q4ruIf4kMjpjkqWjrfJgr2GWA6nghoC47kQAvD_BwE&quot;&gt;Here you have the community discussion&lt;/a&gt; that triggered the feature development later on.&lt;/p&gt;

&lt;h3 id=&quot;memory-implications&quot;&gt;Memory implications&lt;/h3&gt;

&lt;p&gt;Lambdas in Kotlin can reference external &lt;strong&gt;non-final&lt;/strong&gt; variables, not like in Java. When that happens, Kotlin wraps those in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ref&lt;/code&gt; and captures them for their usage within the lambda. More details on that &lt;a href=&quot;https://medium.com/tompee/idiomatic-kotlin-local-functions-4421f86ac864&quot;&gt;on this post by Tompee Balauag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When Kotlin lambdas are not capturing (they only access final variables), they can be instantiated &lt;strong&gt;as a singleton object per application&lt;/strong&gt;, so same instance can be reused every time without an additional cost on memory allocation.&lt;/p&gt;

&lt;p&gt;For interfaces in the other hand that‚Äôs different, since Kotlin creates a new object for each call. There are interesting gotchas regarding this &lt;a href=&quot;https://medium.com/@krossovochkin/kotlin-java-interop-function-references-and-sam-conversions-3d0cd36f7967&quot;&gt;like the one described on this post by Vasya Drobushkov&lt;/a&gt;, so it‚Äôs good to keep this in mind.&lt;/p&gt;

&lt;h3 id=&quot;-extra-bullets&quot;&gt;üí° Extra bullets&lt;/h3&gt;

&lt;p&gt;An interface with a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; function cannot be used as a SAM. Those currently have some issues during the code generation phase at this point, so for now &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-40978&quot;&gt;they are prohibited&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SAM conversions &lt;strong&gt;only work for interfaces&lt;/strong&gt; as of today. Not for abstract classes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-is-out-standard-library-changes/#fun-interfaces-in-stdlib&quot;&gt;Official - SAM conversions for Kotlin classes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/#sam-conversions&quot;&gt;Official - More on SAM conversions for Kotlin classes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-7770?_ga=2.103945408.1399009746.1597478338-1610252576.1591121905&amp;amp;_gac=1.256115449.1597482077.CjwKCAjwj975BRBUEiwA4whRByZeeWUfKevdonRWUAmo11kB3Q4ruIf4kMjpjkqWjrfJgr2GWA6nghoC47kQAvD_BwE&quot;&gt;Community request for the feature&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/tompee/idiomatic-kotlin-higher-order-functions-and-function-types-adb59172796&quot;&gt;Something about Kotlin Function Types&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions&quot;&gt;Official Kotlin docs for SAM conversions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/tompee/idiomatic-kotlin-lambdas-and-sam-constructors-fe2075965bfb&quot;&gt;Details about Kotlin lambdas and SAM conversions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@krossovochkin/kotlin-java-interop-function-references-and-sam-conversions-3d0cd36f7967&quot;&gt;And a few more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;You might be interested in other posts I wrote about Kotlin, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/tail-recursion-and-how-to-use-it-in-kotlin&quot;&gt;Tail recursion and how to use it in Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastillo.dev/kotlin-purity-and-function-memoization&quot;&gt;Kotlin purity and function memoization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I share thoughts and ideas &lt;a href=&quot;https://twitter.com/JorgeCastilloPR&quot;&gt;on Twitter&lt;/a&gt; quite regularly. You can also find me &lt;a href=&quot;https://www.instagram.com/jorgecastillopr/&quot;&gt;on Instagram&lt;/a&gt;. See you there!&lt;/p&gt;

&lt;p&gt;Stay tunned for Kotlin posts üôå&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      

      
        <summary type="html">About Kotlin SAM support for Java interoperability and also for Kotlin interfaces starting on release 1.4.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Contrasting text and icons over background</title>
      <link href="https://jorgecastilloprz.github.io/contrasting-text-and-icons-over-background" rel="alternate" type="text/html" title="Contrasting text and icons over background" />
      <published>2019-11-24T16:36:00+00:00</published>
      <updated>2019-11-24T16:36:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/contrasting-text-and-icons-over-background</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/contrasting-text-and-icons-over-background">&lt;p&gt;Detecting whether background is dark or light to pick the right foreground color for better contrast.&lt;/p&gt;

&lt;p&gt;Quite often we‚Äôve needed to display icons or texts on top of colored backgrounds or images and we‚Äôve fallen into contrasting problems. Let‚Äôs say we have a header like this one in our app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/contrasting_icon_pink_bg.png&quot; width=&quot;350px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That looks fine. Since background color is dark enough, we can go ahead and show light icons and texts over it so there‚Äôs enough contrast. But what if we switched the background to be a very light color dynamically? (let‚Äôs say white). In that case we‚Äôd rather showing dark icons and texts instead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/contrasting_icon_white_bg.png&quot; width=&quot;350px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we need a way to calculate how ‚Äúdark‚Äù or ‚Äúlight‚Äù is a color at runtime. We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorUtils.calculateLuminance(colorInt)&lt;/code&gt; for this. Let‚Äôs write a handy extension to improve semantics, so we can call it over any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorInt&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ColorInt&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ColorUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculateLuminance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.core.graphics.ColorUtils&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.core&lt;/code&gt; atifact. If you have been using other AndroidX libraries until now it‚Äôs highly possible that you already got this dependency transitively.&lt;/p&gt;

&lt;h3 id=&quot;color-luminance&quot;&gt;Color luminance&lt;/h3&gt;

&lt;p&gt;We are considering a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorInt&lt;/code&gt; dark when the ‚Äúluminance‚Äù is lower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.5&lt;/code&gt;. That‚Äôs not just an arbitrary number. Let‚Äôs learn what ‚Äúcolor luminance‚Äù means first, so we can understand the picked threshold.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Luminance is a measure to describe the perceived brightness of a color.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gotcha, it‚Äôs about how colors &lt;strong&gt;are perceived&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you dive into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorUtils.calculateLuminance(colorInt)&lt;/code&gt; you‚Äôll find it transforms the color into the &lt;em&gt;‚ÄúXYZ color space‚Äù&lt;/em&gt; first to get the luminance.&lt;/p&gt;

&lt;p&gt;The XYZ color space belongs to the category of &lt;a href=&quot;https://en.wikipedia.org/wiki/CIE_1931_color_space&quot;&gt;CIE 1931 color spaces&lt;/a&gt;, which were created to reflect physiologically perceived colors in human color vision. The color theory is obviously quite more technical as you can see from the provided link. I‚Äôm not an expert in colors either, but given we‚Äôre interested in how colors are perceived by the human eye for this, this color space would be a perfect fit.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These color spaces are ‚Äúimportant when dealing with color inks, illuminated displays, and recording devices such as digital cameras‚Äù.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúThe CIE XYZ color space encompasses all color sensations that are visible to a person with average eyesight. That is why CIE XYZ (Tristimulus values) is a device-invariant representation of color.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is significative for us, since we‚Äôd rather basing our calculations on how the color is perceived by the human eye under well-lit conditions, intentionally ignoring the massive device screen fragmentation out there.&lt;/p&gt;

&lt;p&gt;In the XYZ color space, the second component (Y) represents relative luminance.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When judging the relative luminance (brightness) of different colors in well-lit situations, humans tend to perceive light within the green parts of the spectrum as brighter than red or blue light of equal power‚Ä¶ The CIE model capitalizes on this fact by setting Y as luminance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The unit of the tristimulus values X, Y, and Z is often arbitrarily chosen so that Y = 1 or Y = 100 is the brightest white that a color display supports.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There you go. That‚Äôs why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.5&lt;/code&gt; (half of it when we represent it as a value between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;) is the perfect threshold value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The closer Y gets to 1, the lighter the color is perceived by the human eye. The closer it gets to 0, the darker.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you can imagine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorUtils.calculateLuminance(colorInt)&lt;/code&gt; relies on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; component of the color, once it‚Äôs converted to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XYZ&lt;/code&gt; color space.&lt;/p&gt;

&lt;p&gt;With this in mind, we can set the color for our icons and texts accordingly.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parseColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#e91e63&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;colorHex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTextColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;favIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setImageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ic_favorite_border_white_24dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;colorHex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTextColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;favIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setImageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ic_favorite_border_black_24dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we‚Äôre good to go üëç&lt;/p&gt;

&lt;h3 id=&quot;when-background-is-an-image&quot;&gt;When background is an image&lt;/h3&gt;

&lt;p&gt;We‚Äôve got a function to calculate luminance given a color, but what can we do when the background is an image?&lt;/p&gt;

&lt;p&gt;Well we can steal &lt;a href=&quot;https://github.com/android/plaid/blob/766093dfd8dfc11265c98c65fb2c3f5311a726cd/core/src/main/java/io/plaidapp/core/util/ColorUtils.java#L42&quot;&gt;some color utilities from Plaid&lt;/a&gt; for this. Thanks to &lt;a href=&quot;https://twitter.com/crafty&quot;&gt;@crafty&lt;/a&gt; and the rest of the Google Android devs for sharing such an awesome sample project.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say we‚Äôve got this header this time. Look at these two variants:&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/contrasting_icon_detail_activity_dark.png&quot; width=&quot;350px&quot; style=&quot;float:left;&quot; /&gt;
  &lt;img src=&quot;assets/images/contrasting_icon_wrong_contrast.png&quot; width=&quot;350px&quot; style=&quot;float:left;margin-left:20px;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;You can see how the one with the dark fav icon works quite better for this background image. But this all depends on the image. E.g: A light icon would work better for this one:&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/contrasting_icon_detail_activity_light.png&quot; width=&quot;350px&quot; style=&quot;float:left;margin-left:20px;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;So again, we need a way to dynamically calculate the better contrasting color per image, given urls for those will often come from server, so we cannot know the images to be used beforehand.&lt;/p&gt;

&lt;p&gt;Regardless of what async image loading library we use (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Picasso&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Glide&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Coil&lt;/code&gt; or any others), there‚Äôs always ways to get dynamic access to the loaded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Drawable&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt;. Libraries use to provide callbacks for this.&lt;/p&gt;

&lt;p&gt;As soon as we get access to the loaded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt;, we can do the following:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindFavIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;iconSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maximumColorCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clearFilters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Do something with the region palette.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Palette&lt;/code&gt; to extract the colors of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt;, but just &lt;strong&gt;for a given region&lt;/strong&gt;. Since our icon is aligned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top|end&lt;/code&gt;, we‚Äôll only be interested in the top right image corner, not the rest, so we set the region accordingly.&lt;/p&gt;

&lt;p&gt;Then we can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val lightness = ColorUtils.isDark(palette)&lt;/code&gt;. Note that we‚Äôre talking about the &lt;a href=&quot;https://github.com/android/plaid/blob/766093dfd8dfc11265c98c65fb2c3f5311a726cd/core/src/main/java/io/plaidapp/core/util/ColorUtils.java#L72&quot;&gt;Plaid ColorUtils&lt;/a&gt; for this one. This is not included in the AndroidX ones.&lt;/p&gt;

&lt;p&gt;This variant extracts the ‚Äúmost populous color‚Äù from the region palette, then it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isDark(color)&lt;/code&gt; over it. But since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Palette&lt;/code&gt; is not always able to calculate the mentioned color, there‚Äôs a chance that it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIGHTNESS_UNKNOWN&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindFavIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;iconSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maximumColorCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clearFilters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lightness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ColorUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// might be unknown!&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isDark&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ColorUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LIGHTNESS_UNKNOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lightness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ColorUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IS_DARK&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In that case we need a second fallback. We can rely on another variant: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorUtils.isDark(bitmap, bitmap.width - iconSize / 2, iconSize / 2)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This one determines if a given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt; is dark, and if it‚Äôs not able to, it has a third fallback to the color of the given pixel (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;) provided as second and third arguments in the call. We can pass the full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt; (not just the region) for it and see whether we have more luck.&lt;/p&gt;

&lt;p&gt;This is how the complete code snippet would look like:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maximumColorCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clearFilters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lightness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ColorUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isDark&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ColorUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LIGHTNESS_UNKNOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ColorUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iconSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lightness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ColorUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IS_DARK&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// make back icon dark on light images&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;favIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setImageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ic_favorite_border_white_24dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;favIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setImageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ic_favorite_border_black_24dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course the third fallback (pixel color) is not great, since surrounding pixels close to it might not have similar colors, but it‚Äôs very unlikely that it gets called and I guess it‚Äôs better than nothing.&lt;/p&gt;

&lt;p&gt;And with this, you‚Äôd get your solution ready to work with dynamic images üëå&lt;/p&gt;

&lt;h3 id=&quot;final-words&quot;&gt;Final words&lt;/h3&gt;

&lt;p&gt;So often designs are a bit naive on dynamic content, but you noticed how content directly affects the user experience. It‚Äôs our responsibility to ask the design team what should we do under the mentioned scenarios, so we can make them be aware of the problem in the first place. The ultimate goal is that both teams can work together to achieve an optimal result.&lt;/p&gt;

&lt;p&gt;If you are interested in Android, I share thoughts and ideas &lt;a href=&quot;https://twitter.com/JorgeCastilloPR&quot;&gt;on Twitter&lt;/a&gt;, quite regularly. You can also find me &lt;a href=&quot;https://www.instagram.com/jorgecastillopr/&quot;&gt;on Instagram&lt;/a&gt;. Please feel free to follow.&lt;/p&gt;

&lt;p&gt;See you around üëãüé®&lt;/p&gt;

&lt;h3 id=&quot;want-to-support-me&quot;&gt;Want to support me?&lt;/h3&gt;

&lt;p&gt;If you reached this point you might consider supporting me for boosting my will to write. If that‚Äôs the case, here you have a button, really appreciated! ü§ó&lt;/p&gt;

&lt;p&gt;Supported or not, I will keep writing and providing content for free ‚úÖ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/jorgecastillo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 51px !important;width: 217px !important;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="android" />
      
        <category term="kotlin" />
      

      
        <summary type="html">Detecting whether background is dark or light to pick the right foreground color for better contrast.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Putting view theming into Context</title>
      <link href="https://jorgecastilloprz.github.io/theming-your-custom-views-through-the-context" rel="alternate" type="text/html" title="Putting view theming into Context" />
      <published>2019-10-16T12:36:00+00:00</published>
      <updated>2019-10-16T12:36:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/theming-your-custom-views-through-the-context</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/theming-your-custom-views-through-the-context">&lt;p&gt;Some words about how to theme views in code by the Context they‚Äôre inflated with.&lt;/p&gt;

&lt;p&gt;My first recommendation would be to take a look at &lt;a href=&quot;https://jorgecastillo.dev/dependency-inversion-on-android-theming&quot;&gt;how to use theme attributes to theme your Android apps&lt;/a&gt; üé® since it‚Äôs very related.&lt;/p&gt;

&lt;p&gt;Also, do not miss &lt;a href=&quot;https://www.youtube.com/watch?v=Owkf8DhAOSo&quot;&gt;this talk by Nick Butcher and Chris Banes&lt;/a&gt; from Android Developer Summit about the differences between themes and styles. It contrasts both and highlights things like how ‚Äúparent‚Äù themes are applied per &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; and for complete &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; hierarchies inflated using it.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;https://ataulm.com/2019/10/14/material-theme-overlay/&quot;&gt;here‚Äôs also a nice read&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ataulm&quot;&gt;Ataulm&lt;/a&gt; about theme overlays that also contains some interesting bits about default styles and how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; is themed.&lt;/p&gt;

&lt;h3 id=&quot;styles-and-themes-per-view&quot;&gt;Styles and themes per View&lt;/h3&gt;

&lt;p&gt;Styling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Views&lt;/code&gt; &lt;strong&gt;directly on XML layouts&lt;/strong&gt; is okay, as long as you reuse a common set of styles across the app to keep coherence, since that‚Äôs the ultimate goal, isn‚Äôt it?&lt;/p&gt;

&lt;p&gt;On top of that, you can also theme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Views&lt;/code&gt; by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:theme&lt;/code&gt; attribute directly on them. That applies the theme to that specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; and &lt;strong&gt;cascade down to all its descendants&lt;/strong&gt;. That comes handy to theme certain subsections of your layouts differently. Keep in mind &lt;strong&gt;this overrides any themes applied at any other level for this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Both approaches usually take place when you‚Äôre not super skilled with styles and themes in Android, so it becomes hard for you to have a proper mental mapping on how to structure those.&lt;/p&gt;

&lt;p&gt;Here‚Äôs their inherent weakness: &lt;strong&gt;They‚Äôre applied per &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; occurrence&lt;/strong&gt;, hence it‚Äôs tedious and prone to errors. These approaches can potentially affect visual coherence across screens if you forget to apply a style or a theme where required, or by using the wrong ones in the wrong place.&lt;/p&gt;

&lt;h3 id=&quot;recommended-approach&quot;&gt;Recommended approach&lt;/h3&gt;

&lt;p&gt;It is always preferable to have styles &amp;amp; themes &lt;strong&gt;imposed by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationTheme&lt;/code&gt;&lt;/strong&gt; whenever possible. This leverages coherence and reusability, plus unlocks design systems (e.g: like Material Design).&lt;/p&gt;

&lt;p&gt;You can achieve that by using &lt;strong&gt;default styles&lt;/strong&gt;. There‚Äôs good details on what default styles are on &lt;a href=&quot;https://www.youtube.com/watch?v=Owkf8DhAOSo&quot;&gt;this talk&lt;/a&gt; and &lt;a href=&quot;https://ataulm.com/2019/10/14/material-theme-overlay/&quot;&gt;this post&lt;/a&gt;, both already recommended above.&lt;/p&gt;

&lt;p&gt;For summarizing here a bit, default styles are applied through standard theme attributes (i.e: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textInputStyle&lt;/code&gt;) that you can give a value to in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationTheme&lt;/code&gt;. Those will impose a global style for all the occurrences of the corresponding component across the app (i.e: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextInputLayout&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ApplicationTheme&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Theme.MaterialComponents.DayNight&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Default style used to theme all `TextInputLayouts`. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;textInputStyle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@style/ApplicationTheme.Input&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ApplicationTheme.Input&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Widget.MaterialComponents.TextInputLayout.FilledBox&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Some style item definitions here --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Views&lt;/code&gt; pass it over to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt; constructor as the default style to use. This is how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextInputLayout&lt;/code&gt; &lt;a href=&quot;https://github.com/material-components/material-components-android/blob/e2eec4aca1795c2795f52098e391c85ccc95a1a4/lib/java/com/google/android/material/textfield/TextInputLayout.java#L383&quot;&gt;from Material Components&lt;/a&gt; does it.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextInputLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AttributeSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textInputStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note how &lt;strong&gt;this is a style, not a theme&lt;/strong&gt;. The fact that you‚Äôre using a theme attribute to assign it doesn‚Äôt mean it‚Äôs a theme neither a theme overlay. It is a theme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr&lt;/code&gt; that points to a style, or in other words, &lt;strong&gt;you theme your app using some default styles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The style will inherit from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;material&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextInputLayout&lt;/code&gt; style as we did in XML above.&lt;/p&gt;

&lt;p&gt;If you‚Äôre able to theme your complete application using default styles defined in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationTheme&lt;/code&gt;, and you make sure that your activities are inheriting from this theme, you‚Äôll unlock &lt;strong&gt;theming by Context&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;theming-by-context&quot;&gt;Theming by Context&lt;/h3&gt;

&lt;p&gt;So you got your design system in place. Your activities inherit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationTheme&lt;/code&gt;, and all views in the app should be reusing theme attributes for their colors. Material components already do this by themselves, but you‚Äôll want to do the same for any other views.&lt;/p&gt;

&lt;p&gt;This makes you able to swap your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationTheme&lt;/code&gt; by any other theme and the app will automatically update its colors transparently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This happens essentially because your app theme is applied to the application Context and the Context of your activities&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Views&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dialogs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DialogFragments&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BottomSheets&lt;/code&gt;, or any other UI bit in the hierarchy inflated with the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; will be themed following it.&lt;/p&gt;

&lt;p&gt;So here‚Äôs a remainder:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It‚Äôs the closest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; the one imposing how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; (or other UI elements) looks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;context-wrapping&quot;&gt;Context wrapping&lt;/h3&gt;

&lt;p&gt;For theming, &lt;a href=&quot;https://github.com/material-components/material-components-android/blob/4e239315a857189c24e6dbe489115512c1d24762/lib/java/com/google/android/material/theme/overlay/MaterialThemeOverlay.java#L75&quot;&gt;material wraps the Context into a ContextThemeWrapper&lt;/a&gt; before passing it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; parent constructors, and the proper application theme is passed for it. This is very well explained by Ataul &lt;a href=&quot;https://ataulm.com/2019/10/14/material-theme-overlay/&quot;&gt;on his post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Following docs, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContextThemeWrapper&lt;/code&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context wrapper that allows you to modify or replace the theme of the wrapped context.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The key implication for this fact is that you must take care of using the closest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; whenever you‚Äôre inflating your own views &lt;strong&gt;in code&lt;/strong&gt;. Same for dialogs and everything. Otherwise they can potentially skip the theme needed.&lt;/p&gt;

&lt;p&gt;Here‚Äôs how you can use it by yourself, in case you don‚Äôt have some specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Views&lt;/code&gt; directly linked to the proper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; because reasons, or you want to override it from code.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;themedContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContextThemeWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;YourCustomTheme&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// apply the theme you need to the Context.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCustomView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;themedContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;otherView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LayoutInflater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;themedContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Et voil√†, &lt;strong&gt;everything inflated with that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; will be themed accordingly&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This might not feel like an issue you easily fall into if you use app wide theming through default styles, but it can come handy in legacy codebases that are not following this pattern and are using styles arbitrarily. It‚Äôs usually not easy to refactor the whole thing all at once, is it?&lt;/p&gt;

&lt;p&gt;Another scenario where you can find an issue is on instrumentation tests or when you‚Äôre unit testing Android UI using tools like Robolectric or similar. Whenever you‚Äôre using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; for instantiating your own views in tests, you should always ensure it‚Äôs properly themed. Otherwise you will run into two potential failures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Views&lt;/code&gt; are reusing theme attributes (i.e: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?attr/colorSurface&lt;/code&gt;), those attributes &lt;strong&gt;will not be resolved and crash&lt;/strong&gt; at runtime üôÄ, so your test will fail.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre asserting over UI you can potentially get some assertion errors, since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; will not be themed as expected.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To solve it, once again, wrap the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; with &lt;a href=&quot;https://developer.android.com/reference/androidx/appcompat/view/ContextThemeWrapper&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContextThemeWrapper&lt;/code&gt;&lt;/a&gt; to provide the theme you need before proceeding to inflate any views using it.&lt;/p&gt;

&lt;p&gt;You can grab &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContextThemeWrapper&lt;/code&gt; &lt;a href=&quot;https://developer.android.com/reference/android/view/ContextThemeWrapper&quot;&gt;from the SDK&lt;/a&gt; and it was actually also ported to &lt;a href=&quot;https://developer.android.com/reference/androidx/appcompat/view/ContextThemeWrapper&quot;&gt;AppCompat&lt;/a&gt; so you can also grab it from there. &lt;strong&gt;Both are equivalent&lt;/strong&gt; for what is worth for the end user. The Android team did this mostly for backporting a specific constructor that the Android team needed.&lt;/p&gt;

&lt;p&gt;AndroidX Appcompat artifact:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;androidx.appcompat:appcompat:1.1.0&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;androidx.appcompat:appcompat:1.1.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;final-words&quot;&gt;Final words&lt;/h3&gt;

&lt;p&gt;The difference between themes and styles is highly important, so I can‚Äôt recommend enough &lt;a href=&quot;https://www.youtube.com/watch?v=Owkf8DhAOSo&quot;&gt;this talk&lt;/a&gt;. Never try to use themes as styles, or vice versa. Writing these posts is also helping me to polish my mental mapping on this.&lt;/p&gt;

&lt;p&gt;Don‚Äôt for get to take a look to &lt;a href=&quot;https://jorgecastillo.dev/dependency-inversion-on-android-theming&quot;&gt;the previous post in the series&lt;/a&gt;, if you didn‚Äôt! And big thanks to Ataul, Nick Butcher and Chris Banes for their helpful resources.&lt;/p&gt;

&lt;p&gt;For anything else you can always &lt;a href=&quot;https://twitter.com/JorgeCastilloPR&quot;&gt;find me on Twitter&lt;/a&gt;, feel free to ping me there. You can also find me &lt;a href=&quot;https://www.instagram.com/jorgecastillopr/&quot;&gt;on Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See you soon! üëã&lt;/p&gt;

&lt;h3 id=&quot;want-to-support-me&quot;&gt;Want to support me?&lt;/h3&gt;

&lt;p&gt;If you reached this point you might consider supporting me for boosting my will to write. If that‚Äôs the case, here you have a button, really appreciated! ü§ó&lt;/p&gt;

&lt;p&gt;Supported or not, I will keep writing and providing content for free ‚úÖ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/jorgecastillo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 51px !important;width: 217px !important;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="android" />
      
        <category term="kotlin" />
      

      
        <summary type="html">Some words about how to theme views in code by the Context they‚Äôre inflated with.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Dependency Inversion on Android Theming</title>
      <link href="https://jorgecastilloprz.github.io/dependency-inversion-on-android-theming" rel="alternate" type="text/html" title="Dependency Inversion on Android Theming" />
      <published>2019-10-11T12:36:00+00:00</published>
      <updated>2019-10-11T12:36:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/dependency-inversion-on-android-theming</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/dependency-inversion-on-android-theming">&lt;p&gt;The concept of DI is something we don‚Äôt use to associate with XML files like the Android resources. Let‚Äôs learn how Android uses it for theming apps.&lt;/p&gt;

&lt;h3 id=&quot;theme-attributes&quot;&gt;Theme attributes&lt;/h3&gt;

&lt;p&gt;Let‚Äôs say we‚Äôre theming our app using one of the &lt;a href=&quot;https://github.com/material-components/material-components-android&quot;&gt;Material Components&lt;/a&gt; themes, and you want to fix the value for a couple of theme attributes. Your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;styles.xml&lt;/code&gt; file could look like this.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- styles.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AppTheme&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Theme.MaterialComponents.NoActionBar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorSurface&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/dark_background&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorOnSurface&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/light_over_dark&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;colors.xml&lt;/code&gt; be something like:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- colors.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;color&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dark_background&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;#121212&lt;span class=&quot;nt&quot;&gt;&amp;lt;/color&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;color&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;light_over_dark&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;#FFFFFF&lt;span class=&quot;nt&quot;&gt;&amp;lt;/color&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So that is how &lt;strong&gt;your application theme associates a theme color attribute with a concrete color&lt;/strong&gt;. &lt;a href=&quot;https://github.com/material-components/material-components-android/blob/e2eec4aca1795c2795f52098e391c85ccc95a1a4/lib/java/com/google/android/material/color/res/values/attrs.xml#L26&quot;&gt;If you dig just a little into the library code&lt;/a&gt; you‚Äôll find those attributes are defined as custom Android attributes, usually into an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attrs.xml&lt;/code&gt; file (file names are not relevant for the system).&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- attrs.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorSurface&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorOnSurface&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, you can reference those theme attributes from your views.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;androidx.cardview.widget.CardView&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app:cardBackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?attr/colorSurface&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/text&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@dimen/spacing_medium&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/welcome_message&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:textAppearance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/TextAppearance.MaterialComponents.Headline6&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:textColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?attr/colorOnSurface&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/androidx.cardview.widget.CardView&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main difference between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?attr/&lt;/code&gt; syntax and the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@color/&lt;/code&gt; one is that with the former you‚Äôre reusing the theme attributes. I.e: &lt;strong&gt;if you decide to switch themes, your application will work transparently and get colors updated accordingly across the app&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That potentially leverages the design team to produce carefully defined color and style palettes to improve reusability and UI homogeneity.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?attr/colorSurface&lt;/code&gt; and the alternative syntax &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?colorSurface&lt;/code&gt; are equivalent. Both will lead to the same color resource under this scenario.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you directly reference colors, your app is &lt;strong&gt;not prepared to swap themes&lt;/strong&gt; unless we‚Äôre talking about a very specific (and ad hoc) case like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DayNight&lt;/code&gt; themes, where the system is prepared to look for resources named equally for both theme modes. But that‚Äôs something very specific.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It‚Äôs also possible to reference colors as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?android:attr/&lt;/code&gt;. Those attributes must be defined in the Android SDK version being used as a target. Otherwise you‚Äôll get a runtime inflation crash.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;hows-that-related-to-dependency-inversion&quot;&gt;How‚Äôs that related to Dependency Inversion?&lt;/h3&gt;

&lt;p&gt;When you define custom attributes and make your complete app UI depend on those instead of on direct color references, those are &lt;strong&gt;working as an abstraction&lt;/strong&gt;. The views don‚Äôt care about the underlying bindings provided for those colors, they just need to know about the custom attributes.&lt;/p&gt;

&lt;p&gt;Note that I‚Äôm not using the word ‚Äúbindings‚Äù here accidentally. If you take a look to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppTheme&lt;/code&gt;, you‚Äôll realize that‚Äôs where your color bindings (from custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr&lt;/code&gt; to concrete &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;) are. So there‚Äôs a single place in your app where the associations are done, and the complete app can just depend on the abstractions.&lt;/p&gt;

&lt;p&gt;That‚Äôs the concept of &lt;em&gt;Dependency Inversion&lt;/em&gt;, and you can actually make good use of it under different scenarios.&lt;/p&gt;

&lt;h3 id=&quot;how-to-make-use-of-theme-attributes&quot;&gt;How to make use of theme attributes&lt;/h3&gt;

&lt;p&gt;I can imagine a couple of good scenarios.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swap app themes at runtime&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is sometimes requested by the product and/or design teams, when they want the app to support different themes depending on things like the user privileges under the platform. E.g: Default vs Premium users. They might want styles and colors to vary in those cases.&lt;/p&gt;

&lt;p&gt;As described previously, the only way to swap themes at runtime is that all the views on your app reference theme attributes and never colors directly. Let‚Äôs say you got 2 different themes you want to use that bind the custom theme attributes to different color palettes:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AppTheme.Default&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AppTheme&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorSurface&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/dark_background_default&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorOnSurface&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/light_over_dark_default&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AppTheme.Premium&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AppTheme&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorSurface&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/dark_background_premium&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorOnSurface&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/light_over_dark_premium&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you can switch themes at runtime. Keep in mind &lt;strong&gt;views are themed during inflation, so activities need to be recreated&lt;/strong&gt; for switching themes.&lt;/p&gt;

&lt;p&gt;The process is essentially calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTheme(themeResId)&lt;/code&gt; before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setContentView()&lt;/code&gt; and also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activity.recreate()&lt;/code&gt; when required.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Android views don‚Äôt work reactively to themes at this point so there‚Äôs not the chance to re-theme those without recreation. Some themes like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DayNight&lt;/code&gt; are able to do it without recreation but they‚Äôve been coded by the Android team providing some ad hoc hooks in the correct places to make those work. It‚Äôs not something meant to be widely extended or reused at the time of writing this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;setTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pickedThemeFromPreferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Somewhere else in the app after you select a new theme at runtime:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swapTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@StyleRes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;themeResId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;prefs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PreferenceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getDefaultSharedPreferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PREF_THEME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;themeResId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Libraries containing UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is probably the most widely used scenario. Here we can look at libraries like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;material&lt;/code&gt;. Those define a list of custom color attributes then make their views (the components in this case) depend on those &lt;strong&gt;with no exceptions&lt;/strong&gt;. The library targets the abstractions all the way, and client projects that are depending on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;material&lt;/code&gt; extend their themes to provide bindings for those colors.&lt;/p&gt;

&lt;p&gt;Within the library, both &lt;a href=&quot;https://github.com/material-components/material-components-android/blob/e2eec4aca1795c2795f52098e391c85ccc95a1a4/lib/java/com/google/android/material/theme/res-public/values/public.xml#L21&quot;&gt;the theme styles&lt;/a&gt; and &lt;a href=&quot;https://github.com/material-components/material-components-android/blob/e2eec4aca1795c2795f52098e391c85ccc95a1a4/lib/java/com/google/android/material/color/res-public/values/public.xml#L17&quot;&gt;the color attributes&lt;/a&gt; that want to be exposed, are tagged as public so they can be referenced by clients.&lt;/p&gt;

&lt;p&gt;When you take this approach, your library doesn‚Äôt need to depend on the client project, but vice versa, so &lt;strong&gt;the strict direction of the dependencies stays the same, but the lib is getting its attributes fulfilled by the client project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now your app can seamlessly swap themes for different scenarios and the library (or library module) is never affected.&lt;/p&gt;

&lt;p&gt;That‚Äôs the nature of &lt;em&gt;Dependency Inversion&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;layout-preview-rendering&quot;&gt;Layout Preview rendering&lt;/h3&gt;

&lt;p&gt;This is probably one of the big worries given preview is hugely used for coding UIs fast, but no fear. The preview knows how to render custom attributes as if they were direct references. You only need to &lt;strong&gt;select the proper theme in your preview&lt;/strong&gt; menu so it gets the required bindings on the theme to know which colors they‚Äôre pointing to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/preview_theme_selection.png&quot; alt=&quot;preview theme selection image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;final-words&quot;&gt;Final words&lt;/h3&gt;

&lt;p&gt;Note that what I‚Äôve describe here is not only usable for colors but for any Android resources that can be defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes&lt;/code&gt; üëç&lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in any topics regarding Android, feel free to keep an eye on my blog üôèüèΩ. You can also &lt;a href=&quot;https://twitter.com/JorgeCastilloPR&quot;&gt;follow me on Twitter&lt;/a&gt; or &lt;a href=&quot;https://www.instagram.com/jorgecastillopr/&quot;&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;want-to-support-me&quot;&gt;Want to support me?&lt;/h3&gt;

&lt;p&gt;If you reached this point you might consider supporting me for boosting my will to write. If that‚Äôs the case, here you have a button, really appreciated! ü§ó&lt;/p&gt;

&lt;p&gt;Supported or not, I will keep writing and providing content for free ‚úÖ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/jorgecastillo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 51px !important;width: 217px !important;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="android" />
      
        <category term="kotlin" />
      

      
        <summary type="html">The concept of DI is something we don‚Äôt use to associate with XML files like the Android resources. Let‚Äôs learn how Android uses it for theming apps.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">When Android met FP</title>
      <link href="https://jorgecastilloprz.github.io/when-android-met-fp" rel="alternate" type="text/html" title="When Android met FP" />
      <published>2018-07-21T17:25:00+00:00</published>
      <updated>2018-07-21T17:25:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/when-android-met-fp</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/when-android-met-fp">&lt;p&gt;Learning new things is hard, and rejecting the unknown is part of human nature. There‚Äôs some reaction inside us that makes our minds reject anything new in some way.&lt;/p&gt;

&lt;p&gt;Then time flies and you start getting used to it.&lt;/p&gt;

&lt;h3 id=&quot;getting-rid-of-the-noise&quot;&gt;Getting rid of the noise&lt;/h3&gt;

&lt;p&gt;Even if it‚Äôs part of our nature, these reactions are irrational and not related in any way to how we think. It‚Äôs just how we react in the beginning. We can be scared, but then there‚Äôs always our intuition beyond that. If we detect that there‚Äôs something valuable on that new thing, we smartly put all our efforts on trying to understand and remove the noise around it. That‚Äôs also part of our nature, as engineers. We are proactive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/arrival1.jpeg&quot; alt=&quot;Arrival 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remember the first time we saw ReactiveX logo, some years ago?.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-jargonÔ∏è&quot;&gt;The Jargon‚Ñ¢Ô∏è&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/jargon.jpeg&quot; alt=&quot;Jargon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new language and its new grammars. A new jargon. A new paradigm, which at the end of the day is also a language by itself in the most generic sense. Each term on it seems incomprehensible and hard to master, &lt;strong&gt;not because it‚Äôs complex, but because it‚Äôs different&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And we are curious. We try to learn each one of the terms separately. It looks like the easiest way to gradually understand the whole thing. &lt;strong&gt;Either&lt;/strong&gt; we &lt;strong&gt;Try&lt;/strong&gt;, or abandon. We‚Äôll probably need to be good &lt;strong&gt;Readers&lt;/strong&gt; though.&lt;/p&gt;

&lt;p&gt;The more we use this terms, the more natural they feel all together. It requires time and to use the language out there, in the real world. And practice is key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/arrival3.jpeg&quot; alt=&quot;Arrival 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we keep moving, we‚Äôll eventually have a glimpse on the connection between all the symbols. That‚Äôs how to learn a language. We will get familiarized with how and when to use each one of them. We‚Äôll start to master the syntax, and to know how to read it. We already went through this process many times in the past, didn‚Äôt we?&lt;/p&gt;

&lt;p&gt;After some time, we finally realize something. The jargon is not as scary as it was anymore. We start to notice some interesting connections with our own language, the one we are used to. Our knowledge keeps growing, and our mind stays open.&lt;/p&gt;

&lt;p&gt;The more we learn about these connections, our hability to express ourselves becomes broader. &lt;strong&gt;We gain perspective and resources to communicate and to solve problems&lt;/strong&gt;. Even though we can end up not using this language in the future, these new concepts will make us richer in terms of expressivity.&lt;/p&gt;

&lt;p&gt;Ideally we‚Äôll start mixing languages and concepts, becoming able to use the best of all worlds to express our needs and solve our problems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/arrival4.jpeg&quot; alt=&quot;arrival 4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reaching-familiarity&quot;&gt;Reaching familiarity&lt;/h3&gt;

&lt;p&gt;After this little history, lets get back to what is worth about FP. The more we read about it and use it, the more we‚Äôll notice something else.&lt;/p&gt;

&lt;p&gt;There‚Äôs the same bunch of words repeated every single time, regardless of the problems we are solving. We map, flatMap, fold, combine, compose‚Ä¶ Sounds like something we‚Äôve been doing all this time, doesn‚Äôt it?.&lt;/p&gt;

&lt;p&gt;FP can be a bit overwhelming in the beginning, that‚Äôs for sure. But as soon as you understand the main purpose of its main pieces, you‚Äôll find yourself using the same stuff all the time. These abstractions talk about how to operate over the data, which is not related to any semantics for a given problem, but apply to any different use cases.&lt;/p&gt;

&lt;p&gt;You‚Äôll get familiar with all those if you want to, in case you‚Äôre not already, and when that time comes, you‚Äôll find it much easier than what it seemed to be.&lt;/p&gt;

&lt;p&gt;Once you do, you‚Äôll have enough knowledge to go even further and read your programs in a more abstract way based on their behaviours and the way they operate with the data. Including mobile apps. That‚Äôll make those much more testable and deterministic, therefore easier to reason about.&lt;/p&gt;

&lt;h3 id=&quot;do-we-need-a-change&quot;&gt;Do we need a change?&lt;/h3&gt;

&lt;p&gt;As engineers, our nature is to evolve and learn new stuff. We already do that, on a daily basis. Moving to FP is &lt;strong&gt;obviously not required&lt;/strong&gt;, though. You‚Äôre free to keep the same approaches and concepts you feel comfortable with, and it‚Äôs completely legit. Same story for not changing languages and paradigms.&lt;/p&gt;

&lt;p&gt;Said that, it‚Äôs always a good thing to learn new things and be able to evaluate, because they might fit. They might be helpful. Once you are ready for it, you‚Äôll be on your full right to reject them if you feel they‚Äôre not fitting for you or your team.&lt;/p&gt;

&lt;h3 id=&quot;about-arrow-itself&quot;&gt;About Arrow itself&lt;/h3&gt;

&lt;p&gt;As a team, we would like people to become interested on learning new ways of coding and become able to evaluate and bring those to discussion topics into their professional environments, which we believe is always constructive and positive.&lt;/p&gt;

&lt;p&gt;The same way, we‚Äôre so willing to keep getting productive feedback, and also trying to find ways to make this new paradigm more accessible to everybody. If we come back to the jargon ‚Äúproblems‚Äù and its learning curve (&lt;strong&gt;which we‚Äôre very aware of&lt;/strong&gt;), we‚Äôd never hesitate on changing any names if the community finds any clear issues with any of the current ones. I‚Äôd say we‚Äôve done it more than a couple of times already . We don‚Äôt care a lot about the jargon, but more about it being usable and understandable.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;Let‚Äôs always keep in mind that Functional Programming is a paradigm, which have been proven to be useful and effective many times before. It‚Äôs not about platforms anymore. &lt;strong&gt;Paradigms can be applied over any problem and any program&lt;/strong&gt;, the same than languages. There‚Äôs not just a subset of programs that are valid for it. It‚Äôs neither about being better or worse than OOP.&lt;/p&gt;

&lt;p&gt;Android, as a system with a frontend layer, database and network queries, and much more, is based on side effects. But we learned long ago to abstract us away from these. That‚Äôs how layered / decoupled architectures were born. As long as you‚Äôre outside of the ‚Äúdangerous‚Äù boundaries, you‚Äôre free to program in the way that fits better your needs.&lt;/p&gt;

&lt;p&gt;Let‚Äôs also remember that to have some fear to the unknown defines us, the same way as being curious and adapting to new things. Promoting change implies growth as persons and engineers.&lt;/p&gt;

&lt;p&gt;Also note that there is a big educational component required before to accept a new paradigm that we‚Äôve not been used to by history. We believe it‚Äôs worth it.&lt;/p&gt;

&lt;p&gt;Stay curious and continuously learning, that‚Äôs part of what we are.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/arrival5.jpeg&quot; alt=&quot;arrival 5&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This post has not any intentions on promoting conflict or blaming anybody‚Äôs attitude, but to promote constructive feedback. Not just for Arrow or FP, but anything. We are all on the same boat, and one of the most valuable things we have in the Android community, in my opinion, is that we know how to progress all together. There are not many communities that can say that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;want-to-support-me&quot;&gt;Want to support me?&lt;/h3&gt;

&lt;p&gt;If you reached this point you might consider supporting me for boosting my will to write. If that‚Äôs the case, here you have a button, really appreciated! ü§ó&lt;/p&gt;

&lt;p&gt;Supported or not, I will keep writing and providing content for free ‚úÖ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/jorgecastillo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 51px !important;width: 217px !important;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;related-links&quot;&gt;Related links&lt;/h3&gt;

&lt;p&gt;If you‚Äôre interested on &lt;a href=&quot;https://arrow-kt.io&quot;&gt;Arrow&lt;/a&gt; and Functional Programming over Kotlin, have a read one some of the other articles I‚Äôve posted about this subject. You can also &lt;a href=&quot;https://twitter.com/JorgeCastilloPR&quot;&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastilloprz.github.io/kotlin-fp-does-it-make-sense&quot;&gt;Kotlin Functional Programming: Does it make sense?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastilloprz.github.io/kotlin-dependency-injection-with-the-reader-monad&quot;&gt;Kotlin Dependency Injection with the Reader Monad&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastilloprz.github.io/kotlin-fp-1-monad-stack&quot;&gt;Kotlin Functional Programming I: Monad Stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastilloprz.github.io/kotlin-fp-2-monad-transformers&quot;&gt;Kotlin Functional Programming II: Monad Transformers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastilloprz.github.io/tail-recursion-and-how-to-use-it-in-kotlin&quot;&gt;Tail recursion and how to use it in Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jorgecastilloprz.github.io/kotlin-purity-and-function-memoization&quot;&gt;Kotlin purity and function memoization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      
        <category term="android" />
      
        <category term="fp" />
      

      
        <summary type="html">Learning new things is hard, and rejecting the unknown is part of human nature. There‚Äôs some reaction inside us that makes our minds reject anything new in some way.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Kotlin Functional Programming, Does it make sense?</title>
      <link href="https://jorgecastilloprz.github.io/kotlin-fp-does-it-make-sense" rel="alternate" type="text/html" title="Kotlin Functional Programming, Does it make sense?" />
      <published>2017-10-18T15:18:00+00:00</published>
      <updated>2017-10-18T15:18:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/kotlin-fp-does-it-make-sense</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/kotlin-fp-does-it-make-sense">&lt;p&gt;Functional programming can feel like a big wave of fresh air over a beautiful landscape at sunset. The flowers are literally us. üòç üåº (maybe?)&lt;/p&gt;

&lt;p&gt;Ok no jokes: it‚Äôs clearly worth it!&lt;/p&gt;

&lt;h3 id=&quot;is-kotlin-a-fp-lang&quot;&gt;Is Kotlin a FP lang?&lt;/h3&gt;

&lt;p&gt;When we think about Kotlin, OOP is always implicit. But that‚Äôs not strictly necessary. Kotlin is still &lt;strong&gt;open to a different paradigm&lt;/strong&gt; thanks to some of its built-in features. I‚Äôm referring to FP here.&lt;/p&gt;

&lt;p&gt;If you take a careful look at the built-in features, you will find some very obvious ones like &lt;em&gt;higher order functions or the power to use functions as first class citizens&lt;/em&gt;. That means you‚Äôre able to treat functions as values in Kotlin. This feature is very related to &lt;strong&gt;function oriented styles&lt;/strong&gt;, even if that does not strictly mean Functional Programming. But it opens a whole new world of approaches for you.&lt;/p&gt;

&lt;p&gt;Having the possibility to pass functions as arguments, return them as other functions results, or store them in variables or lists for later usage, opens the language to new techniques like &lt;strong&gt;deferring execution&lt;/strong&gt;. If you return functions on your different layers instead of already computed values, what you get back from it is a composed deferred computation, or in other words, &lt;strong&gt;lazy evaluation&lt;/strong&gt;. Your computations are deferred in time, still not run, so you keep control over when to do that.&lt;/p&gt;

&lt;p&gt;This is completely related to FP, and you will see why in the following lines.&lt;/p&gt;

&lt;p&gt;Also &lt;em&gt;functions as first class citizens&lt;/em&gt;, as you already know, means you can just use functions the same way and on the same places you were using classes in Java. That means you can declare those at a package level, if you want to. Because honestly, do we always need to play with instances all the time?, or is it kind of ‚Äúimposed‚Äù by our paradigm and the libraries we use?&lt;/p&gt;

&lt;p&gt;Actually if you take a careful look at the language you will find tons of additional features that you can find on many functional languages: Type inference, operator overloading, good support for syntax extensions (implemented by &lt;em&gt;extension functions&lt;/em&gt;), collection combinators as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;‚Ä¶, or even &lt;strong&gt;algebraic data types&lt;/strong&gt; (sealed classes + data classes).&lt;/p&gt;

&lt;p&gt;The language is even abstracting some logics and behaviors to functions, and not to classes, as you would do in OOP. That‚Äôs something very usual on &lt;strong&gt;FP vs OOP&lt;/strong&gt; comparisons, since those logics are abstracted to easily reusable functions on Functional Programming.&lt;/p&gt;

&lt;p&gt;A good example of this would be again the collections API functions mentioned before. I.e: mapping a collection (or calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map(f: (A) -&amp;gt; B)&lt;/code&gt; over it) means applying a mapping function to each one of its elements and returning a new collection containing all those. So if we split this behavior in two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Abstraction of mapping generic behavior, which is appliable over any collection. That would be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; high order function by itself, so it applies a given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; lambda for all the elements in a collection.&lt;/li&gt;
  &lt;li&gt;Implementation details for the current execution are delegated to the function being passed as an argument (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So recaping a bit, looks like Kotlin implements some approaches very related to FP langs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does it mean it is or can be considered a Functional Programming language?&lt;/strong&gt; Probably not, or probably yes ¬Ø\_(„ÉÑ)_/¬Ø. I mean, what a functional programing lang is, is not clearly defined and it depends on where you look at or which posts you read. The boundaries for that could be a bit blurry. But honestly, I think that is not such important here.&lt;/p&gt;

&lt;p&gt;At the end of the day, truth is Kotlin is ‚Äúunlocking‚Äù the chance to do pure Functional Programming just by adding some interesting built-in features. So if we wanted to achieve it, we definitely could.&lt;/p&gt;

&lt;h3 id=&quot;but-should-we&quot;&gt;But should we?&lt;/h3&gt;

&lt;p&gt;It‚Äôs a well funded question, since we could just keep doing OOP and that‚Äôs all, given that it worked for us since ever. So why to switch?&lt;/p&gt;

&lt;p&gt;Well, let‚Äôs expose three really important benefits from Functional Programming to start with.&lt;/p&gt;

&lt;h3 id=&quot;referential-transparency&quot;&gt;Referential Transparency&lt;/h3&gt;

&lt;p&gt;A function should be completely clear and straightforward about what‚Äôs it asking for, and what‚Äôs it giving in return. That means &lt;strong&gt;side effects are not welcome&lt;/strong&gt; here, since those break this term. Just by looking at a function return type and it‚Äôs parameter types, I must be able to know exactly what can I get out of it. So the goal is to make the function completely explicit, including all the possible return cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When you are writing public apis I‚Äôd suggest to always expose types&lt;/strong&gt; (by convention). Even if the lang allows you to avoid them on return types thanks to type inference. Type inference is great, but public APIs from functions should not be affected by it, since that &lt;strong&gt;breaks public API contract readability&lt;/strong&gt;, hence referential transparency. At the same time, please, feel free (and I promote it) to use type inference in any other cases, like function bodies.&lt;/p&gt;

&lt;h3 id=&quot;purity&quot;&gt;Purity&lt;/h3&gt;

&lt;p&gt;If I call a function one billion times, and I pass it the &lt;strong&gt;same argument values&lt;/strong&gt; every single time, I should get the exact &lt;strong&gt;same result&lt;/strong&gt; every single time. That means the function is not performing any side effects on its body. Its not doing anything unexpected under the hood. It is not trying to access or modify any external state, neither using any third party APIs that could potentially throw.&lt;/p&gt;

&lt;p&gt;For side effects we understand things that escape your program‚Äôs logic control, like printing to console, rendering to a display, sending metrics to an analytics system in a server, performing an HTTP request, storing something on a cache (no matter whether it‚Äôs persistence or memory), and much more. As soon as your functions provoke changes in the observable world or try to read from it, they contain side effects.&lt;/p&gt;

&lt;p&gt;Effects can be slow, fail (throw), be cancelled, mutate the state of your program‚Ä¶ etc. They leverage ambig√ºity within your program.&lt;/p&gt;

&lt;p&gt;Functional Programming is all about purity, since its mainly based on pushing side effects out of your architecture. We don‚Äôt want side effects to introduce non-determinism into our call stack. Because that removes the ability to do ‚Äúlocal reasoning‚Äù over our code. If we can‚Äôt be certain of what a method is gonna do for all the cases (no exceptions, pun intended!) then we can‚Äôt really reason about it in a deterministic way.&lt;/p&gt;

&lt;p&gt;One good example of this could be compiler optimizations. If every time your code calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add(1, 2)&lt;/code&gt; it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;, compiler can infer that and replace all calls like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add(1, 2)&lt;/code&gt; in your code base by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;, the actual result. Compiler optimizations are just possible when code is deterministic, given they work by inferring behaviors over code.&lt;/p&gt;

&lt;p&gt;So overall we will always try to find ways to get rid of state and side effects on all your architecture layers where you do not really require having those.&lt;/p&gt;

&lt;p&gt;To achieve that we can do something we‚Äôve been doing since ages ago in OP: &lt;strong&gt;Depend on abstractions&lt;/strong&gt;. When your architecture targets abstractions and you leave implementation details for runtime (&lt;strong&gt;side effects are implementation details, keep that in mind please!&lt;/strong&gt;), you achieve a complete pure architecture. That‚Äôs how you achieve what‚Äôs called &lt;strong&gt;Concern separation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So a code based on purity is a predictable code, and hidden bugs cannot happen easily. Think about this: Usually in OOP, bugs are related to state change or race conditions provoked by state change on arbitrary (unexpected) points of your system. Some state is being changed somewhere behind the scenes where it shouldn‚Äôt, and boom that‚Äòs the root of the problem.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Purity means determinism, which means higher and easier testability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;concern-separation&quot;&gt;Concern Separation&lt;/h3&gt;

&lt;p&gt;Looking at FP programs, there is a concept which is present every single time. FP programs / systems are divided in two different parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Algebras:&lt;/strong&gt; Compose a tree of declarative and deferred computations to implement your system logic. That‚Äôs usually done using &lt;strong&gt;algebraic data types&lt;/strong&gt; that define the operations your program is able to perform. This stack of computations &lt;strong&gt;is not gonna be run yet&lt;/strong&gt;. It‚Äôs actually just declared and we can already reason about it, but it‚Äôs waiting for us to decide when we‚Äôre ready to run it. On this step you‚Äôd usually just target abstractions (like &lt;em&gt;Typeclass&lt;/em&gt; defined behaviors or even &lt;em&gt;Free&lt;/em&gt; lifted operations. You will have details about both techniques in future posts). So your code still does not know anything about concrete semantics, just completely abstract behaviors.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Runtime:&lt;/strong&gt; After providing the whole execution tree we can decide to run it. At that moment you usually provide all the semantics / implementation details (side effects) needed for it. So at that very moment and not before, you are resolving the ambiguity imposed by the abstractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This two steps are present on &lt;strong&gt;any&lt;/strong&gt; FP program. And they are a quite big improvement on how we model our programs, since we are now open to (and able) to define them in a completely declarative and abstract style. So we could validate and test our whole execution tree in an end to end black box scenario just by running the algebras (our program) by passing in the implementation details that are more convenient for us at &lt;strong&gt;runtime&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Those implementation details will be the side effects, and &lt;strong&gt;will be the pieces we will end up replacing in tests by test doubles&lt;/strong&gt;. We want to achieve isolation from frameworks, after all. For anything else we can still use our production code, since it‚Äôs gonna be all &lt;strong&gt;pure functions that don‚Äôt need to be mocked&lt;/strong&gt;. We can safely use the production ones as they are, being able to exercise a big chunk of our production codebase and just mock the edges and a couple more pieces. That indeed unlocks black box testing.&lt;/p&gt;

&lt;h3 id=&quot;does-kotlin-have-everything-needed-to-do-pure-fp&quot;&gt;Does Kotlin have everything needed to do pure FP?&lt;/h3&gt;

&lt;p&gt;No, it doesn‚Äôt. The language still lacks some key features that we would require in order to go for type safe pure Functional Programming.&lt;/p&gt;

&lt;p&gt;Some of those, and really important ones, could be &lt;strong&gt;Higher Kinded Types&lt;/strong&gt;, &lt;strong&gt;Typeclasses&lt;/strong&gt;, and a lot of functional constructs and abstractions. Functional programming in a complete way cannot be applied without those.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kotlin/KEEP/pull/87&quot;&gt;There is a KEEP&lt;/a&gt; open by &lt;a href=&quot;https://www.twitter.com/raulraja&quot;&gt;Ra√∫l Raja&lt;/a&gt; for the Kotlin team to ask for including Typeclasses into the language. There is a really interesting dicussion inside, and the official Kotlin team from JetBrains is evaluating this option.&lt;/p&gt;

&lt;p&gt;This doesn‚Äôt necessarily mean it will be implemented, but it is being taken into good account by them. So please, vote there if you would like to have those features built in in the Kotlin compiler!&lt;/p&gt;

&lt;p&gt;So, since there is a lot of work to do, and since we found out good approaches to implement / emulate those things, we decided to create a library for it: Arrow (&lt;a href=&quot;https://arrow-kt.io/&quot;&gt;arrow-kt.io&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Arrow brings Functional Programming types and abstractions to the Kotlin language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stay tunned for more posts about Functional Programming in Kotlin. There‚Äôs much more to come!&lt;/p&gt;

&lt;p&gt;In the meantime, you can follow me on Twitter &lt;a href=&quot;https://www.twitter.com/JorgeCastilloPr&quot;&gt;@JorgeCastilloPr&lt;/a&gt;, where I speak a lot about this topic and many other ones. I will announce new posts there! üéâ&lt;/p&gt;

&lt;p&gt;If you reached this point you might consider supporting me, üëâ&lt;a href=&quot;https://paypal.me/jorgecastilloprz&quot;&gt;here&lt;/a&gt; you have a link where you could do it. Really appreciated! ü§ó Getting support or not, I will for sure keep writing and providing content for free ‚úÖ&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      
        <category term="fp" />
      

      
        <summary type="html">Functional programming can feel like a big wave of fresh air over a beautiful landscape at sunset. The flowers are literally us. üòç üåº (maybe?)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Kotlin purity and function memoization</title>
      <link href="https://jorgecastilloprz.github.io/kotlin-purity-and-function-memoization" rel="alternate" type="text/html" title="Kotlin purity and function memoization" />
      <published>2017-05-17T07:00:00+00:00</published>
      <updated>2017-05-17T07:00:00+00:00</updated>
      <id>https://jorgecastilloprz.github.io/kotlin-purity-and-function-memoization</id>
      <content type="html" xml:base="https://jorgecastilloprz.github.io/kotlin-purity-and-function-memoization">&lt;p&gt;Let‚Äôs learn about the benefits of ‚Äúpurity‚Äù and ‚Äúpure functions‚Äù, and how it affects caching.&lt;/p&gt;

&lt;p&gt;A pure function is a function that &lt;strong&gt;just operates over it‚Äôs input arguments to provide a result&lt;/strong&gt;. It has no side effects, which means that the function itself is not provoking any external effects that you cannot control or &lt;strong&gt;you don‚Äôt expect&lt;/strong&gt;. It‚Äôs not modifying any external state behind the scenes. So if you ran the function one trillion times for the same input arguments you would get the same result one trillion times.&lt;/p&gt;

&lt;p&gt;A pretty common example of pure function usage uses to be the one about JDK Math class functions.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fifteen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;arcTangent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;90.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;arcSine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;45.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;eight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;64.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All those functions would always return the same results for those given arguments, with no exceptions.&lt;/p&gt;

&lt;p&gt;In java it‚Äôs easy to create pure functions. You just mark those functions as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; so those cannot access any state since they aren‚Äôt bound to any enclosing class instance. The compiler itself is going to forbid modification or access to any &lt;strong&gt;non static&lt;/strong&gt; external variables from outside the function, but &lt;strong&gt;you shouldn‚Äôt either modify global static ones&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.haskell.org/Referential_transparency&quot;&gt;Referential Transparency&lt;/a&gt; is a concept definitely present on pure functions. I learned this concept from a &lt;a href=&quot;https://www.47deg.com/presentations/2017/02/18/Functional-error-handling/&quot;&gt;very interesting talk about Functional Error Handling by Raul Raja&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Referential Transparency means that the function does exactly what it promises when you call it, no more, no less. This concept is pretty beneficial for testability. If your code is most likely based on pure functions, that means it‚Äôs also more predictable. And &lt;strong&gt;predictable code is normally easier to test&lt;/strong&gt;. Side effects break referential transparency.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/hermione.gif&quot; alt=&quot;Hermione&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hermione found that purity doesn‚Äôt fit pretty well inside her last released app. She might use some spells to fix it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are an Android developer you know about the need to apply side effects at some point, otherwise you couldn‚Äôt render things on screen or query to an API. Well, you can &lt;strong&gt;apply those effects to the edges imposed by your system&lt;/strong&gt;. Talking about Android, we would be talking about lifecycle callbacks where Android IoC gives us the control. We will talk a bit about this again in the following paragraphs.&lt;/p&gt;

&lt;p&gt;The rest of your architecture could be totally based on &lt;strong&gt;purity-based transformations over the data&lt;/strong&gt;, if you wanted.&lt;/p&gt;

&lt;p&gt;If you pass all your dependencies as parameters all the way, you will find that you are progressively &lt;strong&gt;getting rid of state&lt;/strong&gt; across your architecture except for the edge imposed by it, that would be where the inversion of control is applied (lifecycle callbacks).&lt;/p&gt;

&lt;p&gt;In Java, we normally have state all over the place just because OOP, and because we also decide to inject dependencies through constructors / fields and keep their references retained inside class instances. But that‚Äôs our choice on that. It doesn‚Äôt mean we have a requirement to have state, neither an instance. The only meaning of this situation is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DI&lt;/code&gt; framework we are using is kind of forcing us to have state.&lt;/p&gt;

&lt;p&gt;If you start moving towards this mindset, you will find that you could remove a lot of classes and focus more on functions as &lt;strong&gt;first class citizens&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;having no state means no need to switch those pieces at testing time&lt;/strong&gt;. You will be completely safe by using your real production code for all those chained functions inside your tests, since there aren‚Äôt any problematic side effects creating the need for test doubles. And the testing environment should always replicate production code as much as possible, otherwise you wouldn‚Äôt be writing the right tests, isn‚Äôt it?&lt;/p&gt;

&lt;p&gt;This enables you to test your app almost end to end in a &lt;strong&gt;black box scenario&lt;/strong&gt; just by switching your View implementation (Android) and a couple more side effecting dependencies by test doubles. Purity predictability will make you capable of exercising a bunch of chained functions and easily know what to expect in return for your assertions.&lt;/p&gt;

&lt;p&gt;Also, your production dependency trees would be much shorter. Your switchable dependencies would be just the required ones to apply side effects, but other than that your connection between the inner layers would just be a bunch of pure functions calling each other to apply transformations over the data. Something that does not requires to be passed as an injected dependency.&lt;/p&gt;

&lt;p&gt;But we also have to look at the possible &lt;strong&gt;disadvantages and caveats of purity&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;-performance-consequences&quot;&gt;üò≠ Performance consequences&lt;/h3&gt;

&lt;p&gt;By getting rid of the state we are also sacrificing something important. Let‚Äôs say that we have the need for a memory cache of items loaded from the API.&lt;/p&gt;

&lt;p&gt;First of all, we see a problem on querying the API, since that‚Äôs a side effect.&lt;/p&gt;

&lt;p&gt;Well, a good approach to avoid breaking purity would be to wrap the side effect inside an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO&lt;/code&gt; Monad to defer its execution. This means that we are going to compose a chain of transformations over the data plus the deferred data retrieval by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO&lt;/code&gt; Monad, and we will run the whole chain from the edge imposed by the system, right when we are ready for it. That will happen on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onResume&lt;/code&gt; Activity / Fragment method, most likely.&lt;/p&gt;

&lt;p&gt;So all the side effects are applied on Android lifecycle callbacks, inside the view implementation. So we are safe on this.&lt;/p&gt;

&lt;p&gt;But what happens when we have to do some expensive calculations in some of the layers composed just with pure functions? Also, what would happen if we are server side and the mentioned function to do the calculation is called thousands of times?&lt;/p&gt;

&lt;p&gt;Let‚Äôs have a look on the following code snippet. It‚Äôs a class instance with some state. It‚Äôs capable of calculating the factors of any possible integer:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactorCalculator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sumCache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashMapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;factorCache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashMapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOfFactors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getOrPut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;factorsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;potential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;potential&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getOrPut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sumOfFactors&lt;/code&gt; function returns a sum of all the factors from any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;. That value is calculated by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factorsOf&lt;/code&gt; function, which takes a range from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; to the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt;, converts it to a list and then filters to get just the values that are actually factors of the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both functions rely on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; structure to cache already calculated values results for previous inputs, just to save some CPU cycles and memory. Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map.getOrPut()&lt;/code&gt; function from Kotlin we simplify the code a bit.&lt;/p&gt;

&lt;p&gt;But we have state here, so we don‚Äôt have purity. Our functions are applying side effects over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; structures. So, let‚Äôs try to convert this class to a bunch of pure functions that just operate over their input parameters:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOfFactors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;potential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;potential&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We dropped the concept of class here, as it‚Äôs no longer needed. But during the process, we didn‚Äôt have any other choice than to drop the state since we want those functions to be pure. So we lost our memory caches forever!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sad_afflec.gif&quot; alt=&quot;Sad Afflec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Affleck realized at the bar what he lost on that refactor pushed to production hours ago&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, Affleck has &lt;strong&gt;good reasons to be sad&lt;/strong&gt;, since his refactor was part of some very often used code from server side, and server response timings are going to be damaged so badly because of it.&lt;/p&gt;

&lt;p&gt;Looking back at the previous snippet, it seems like we don‚Äôt have any simple possibility to keep a memory structure storing those already calculated values without provoking side effects.&lt;/p&gt;

&lt;p&gt;Well, that‚Äôs not really true and here is were the need for a feature like &lt;strong&gt;function memoization&lt;/strong&gt; comes in üéâ.&lt;/p&gt;

&lt;h3 id=&quot;-function-memoization&quot;&gt;ü§î Function memoization&lt;/h3&gt;

&lt;p&gt;It‚Äôs a feature commonly built into some programing languages like Groovy, which &lt;strong&gt;enables automatic caching of recurring function-return values&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The idea around the concept is to provide a memory cache at a function level that stores the already calculated function result values. So if we get this feature we wouldn‚Äôt need a class instance and a field reference to store it for us anymore, it would be held as part of the function language meta-level.&lt;/p&gt;

&lt;p&gt;Languages that do not implement this out of the box don‚Äôt have hard times implementing it, although they can lose some syntactic sugar during the process.&lt;/p&gt;

&lt;p&gt;Memoizing a function is a &lt;strong&gt;metafunction&lt;/strong&gt; application. That means we are doing something to the function itself and how it works at a language meta level and not to the function results or it‚Äôs code implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://objectpartners.com/2014/01/28/memoization-in-groovy/&quot;&gt;Here you have a pretty clear article&lt;/a&gt; by Brendon Anderson about how function memoization works in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Groovy&lt;/code&gt;. The code examples inside of it are pretty straightforward. I will paste one here to reduce noise so we can talk about it:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My Closure argument $x&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;myClosure&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myClosure&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myClosure&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myClosure&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You define a closure and then call the language built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memoize()&lt;/code&gt; method on top of it to get a memoized version for the same function. This is the resulting output after running the function those 4 times:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Closure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Closure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, quoting the article: &lt;em&gt;‚ÄúYou can see that the code inside the closure was executed only once for each distinct input parameter.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs because the memoized version of the function is returning already cached results and not recalculating them if it‚Äôs not needed. It just replaces the resulting value with the cached one if the function was called with the same parameters than a previous call so the function code is not really run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This can be done because the function is pure&lt;/strong&gt;, and we can tell that we will always get the same result for the same input parameter. Otherwise we couldn‚Äôt feel safe about replacing it‚Äôs returning value with it‚Äôs cached version.&lt;/p&gt;

&lt;p&gt;So, how could I achieve the same behavior in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin&lt;/code&gt;?&lt;/p&gt;

&lt;h3 id=&quot;-kotlin-implementation&quot;&gt;üéÅ Kotlin implementation&lt;/h3&gt;

&lt;p&gt;Sad story here: Memoization isn‚Äôt a built-in feature for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin&lt;/code&gt;. I will not paste Ben Affleck here again, but I can pretty much imagine your face.&lt;/p&gt;

&lt;p&gt;Anyways, we can still implement it by ourselves so‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/why_so_serious.gif&quot; alt=&quot;why so serious&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a look at this simple Kotlin implementation of the feature:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Memoize1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableMapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getOrPut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Memoize1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;memoizedSumFactors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOfFactors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, let‚Äôs look at the class on top. I have used a class here so it becomes clearer to read, but I could also create an anonymous object extending the correct function type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(T) -&amp;gt; R&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On this basic example I am just covering the case of functions with a standalone parameter that also return a value. But the same strategy could be applied for any number of function arguments.&lt;/p&gt;

&lt;p&gt;Taking a cautious look, you will notice that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Memoize1&lt;/code&gt; class receives as function with the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(T) -&amp;gt; R&lt;/code&gt; as a property. Then I overrided the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invoke&lt;/code&gt; method to be able to make it‚Äôs implementation rely on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableMap&lt;/code&gt;. The map is used to hold the already calculated values as an in memory cache, so the function will return a previously calculated result if the input value is contained in the map. Otherwise, the function will be run and it‚Äôs result will be stored in the map right after that.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Overriding invoke is like overriding the main application of the function, which is it‚Äôs main constructor. In Kotlin, a call with the form a() is converted to a.invoke(). You can also invoke any function by using a.invoke() by yourself. This is equivalent to apply() method from Scala.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I also added an extension method for all the functions with the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(T) -&amp;gt; R&lt;/code&gt;, for any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; types. Thanks to that one, you can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memoize()&lt;/code&gt; over any function that receives a value and returns a result. You will get it‚Äôs memoized version in return.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memoizedSumFactors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumOfFactors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memoizedSumFactors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this would be the only one calculated&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memoizedSumFactors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memoizedSumFactors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memoizedSumFactors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memoizedSumFactors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see on the snippet, by using this code you would get your function body run just once, and for the resting calls for the same input value we would get the cached result instead.&lt;/p&gt;

&lt;p&gt;So here we got what we where looking for! üéä&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After writing this article, found out that the really well known library &lt;a href=&quot;https://github.com/MarioAriasC/funKTionale&quot;&gt;funKTionale&lt;/a&gt; from &lt;a href=&quot;https://github.com/MarioAriasC&quot;&gt;Mario Arias&lt;/a&gt; already &lt;a href=&quot;https://github.com/MarioAriasC/funKTionale/blob/8c36f2d411691f0fe1da62e720d0a0df2834da2d/funktionale-memoization/src/main/kotlin/org/funktionale/memoization/namespace.kt#L28&quot;&gt;implements memoization&lt;/a&gt; for Kotlin. It‚Äôs gonna become a really good example of how to enable memoization for functions up to 22 parameters.&lt;/p&gt;

&lt;p&gt;As you can see, &lt;a href=&quot;https://github.com/MarioAriasC/funKTionale/blob/8c36f2d411691f0fe1da62e720d0a0df2834da2d/funktionale-memoization/src/main/kotlin/org/funktionale/memoization/namespace.kt#L29&quot;&gt;he uses objects extending the required function types&lt;/a&gt;, instead of named classes, to provide a simpler implementation.&lt;/p&gt;

&lt;p&gt;You might think that the code is pretty boilerplate with all those extension functions and classes for the handler. This sort of &lt;em&gt;‚Äúpredef‚Äù&lt;/em&gt; files to define language extensions are pretty typical on functional programing. Truth is that thanks to this simple file that you could copy to any of your projects, you enable memoization for any possible function you want to use.&lt;/p&gt;

&lt;p&gt;So it should be worth it, isn‚Äôt it?&lt;/p&gt;

&lt;p&gt;If you want to avoid the need to implement memoization by yourself, and now that you already know what‚Äôs the concept about, you could add the dependency of &lt;em&gt;funKTionale&lt;/em&gt; to your project. If you are moving your app towards a more functional architecture, this library will be handful for you, and it‚Äôs worth it. Thanks to Mario for putting his best efforts on it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This should wrap things up for now. If you are interested on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin&lt;/code&gt; and possible functional approaches around the language, you could want to take a look to the following articles I wrote recently about tail recursion and &lt;em&gt;Dependency Injection&lt;/em&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader&lt;/code&gt; monad. You might agree or disagree, but those are interesting concepts pretty handful to understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@JorgeCastilloPr/tail-recursion-and-how-to-use-it-in-kotlin-97353993e17f&quot;&gt;Tail recursion and how to use it in Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@JorgeCastilloPr/kotlin-dependency-injection-with-the-reader-monad-7d52f94a482e&quot;&gt;Kotlin Dependency Injection with the Reader Monad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Please, feel free to add me on Twitter &lt;a href=&quot;https://twitter.com/jorgecastillopr&quot;&gt;@jorgecastillopr&lt;/a&gt; to discuss anything related (or not even related!) to this article. I usually post and retweet about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin&lt;/code&gt; and any other Android development and functional related posts.&lt;/p&gt;

&lt;p&gt;If you reached this point you might consider supporting me, üëâ&lt;a href=&quot;https://paypal.me/jorgecastilloprz&quot;&gt;here&lt;/a&gt; you have a link where you could do it. Really appreciated! ü§ó Getting support or not, I will for sure keep writing and providing content for free ‚úÖ&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jorge Castillo</name>
        
        
      </author>

      

      
        <category term="kotlin" />
      
        <category term="fp" />
      

      
        <summary type="html">Let‚Äôs learn about the benefits of ‚Äúpurity‚Äù and ‚Äúpure functions‚Äù, and how it affects caching.</summary>
      

      
      
    </entry>
  
</feed>
